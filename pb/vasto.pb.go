// Code generated by protoc-gen-go.
// source: vasto.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	vasto.proto

It has these top-level messages:
	BalanceRequest
	StoreHeartbeat
	StoreMessage
	ClientHeartbeat
	ClientMessage
	Cluster
	ClusterNode
	StoreResource
	LocalShardsInCluster
	ShardInfo
	Empty
	Requests
	Responses
	Request
	PutRequest
	PutResponse
	DeleteRequest
	DeleteResponse
	GetRequest
	GetResponse
	GetByPrefixRequest
	GetByPrefixResponse
	Response
	KeyValue
	CopyDoneMessge
	BootstrapCopyRequest
	BootstrapCopyResponse
	PullUpdateRequest
	PullUpdateResponse
	UpdateEntry
	CheckBinlogRequest
	CheckBinlogResponse
	DescribeRequest
	DescribeResponse
	CreateClusterRequest
	CreateClusterResponse
	DeleteClusterRequest
	DeleteClusterResponse
	ReplaceNodeRequest
	ReplaceNodeResponse
	CreateShardRequest
	CreateShardResponse
	DeleteKeyspaceRequest
	DeleteKeyspaceResponse
	ReplicateNodePrepareRequest
	ReplicateNodePrepareResponse
	ReplicateNodeCommitRequest
	ReplicateNodeCommitResponse
	ReplicateNodeCleanupRequest
	ReplicateNodeCleanupResponse
	ShrinkClusterPrepareRequest
	ShrinkClusterPrepareResponse
	ShrinkClusterCommitRequest
	ShrinkClusterCommitResponse
	ShrinkClusterCleanupRequest
	ShrinkClusterCleanupResponse
	ResizeRequest
	ResizeResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShardInfo_Status int32

const (
	ShardInfo_EMPTY     ShardInfo_Status = 0
	ShardInfo_BOOTSTRAP ShardInfo_Status = 1
	ShardInfo_READY     ShardInfo_Status = 2
	ShardInfo_DELETED   ShardInfo_Status = 3
)

var ShardInfo_Status_name = map[int32]string{
	0: "EMPTY",
	1: "BOOTSTRAP",
	2: "READY",
	3: "DELETED",
}
var ShardInfo_Status_value = map[string]int32{
	"EMPTY":     0,
	"BOOTSTRAP": 1,
	"READY":     2,
	"DELETED":   3,
}

func (x ShardInfo_Status) String() string {
	return proto.EnumName(ShardInfo_Status_name, int32(x))
}
func (ShardInfo_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

// ////////////////////////////////////////////////
// 1. master received request to balance the data
type BalanceRequest struct {
	DataCenter string `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	StoreGroup string `protobuf:"bytes,2,opt,name=store_group,json=storeGroup" json:"store_group,omitempty"`
	StoreCount uint32 `protobuf:"varint,3,opt,name=store_count,json=storeCount" json:"store_count,omitempty"`
}

func (m *BalanceRequest) Reset()                    { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()               {}
func (*BalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BalanceRequest) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *BalanceRequest) GetStoreGroup() string {
	if m != nil {
		return m.StoreGroup
	}
	return ""
}

func (m *BalanceRequest) GetStoreCount() uint32 {
	if m != nil {
		return m.StoreCount
	}
	return 0
}

type StoreHeartbeat struct {
	// only in the initial heartbeat
	StoreResource *StoreResource `protobuf:"bytes,1,opt,name=store_resource,json=storeResource" json:"store_resource,omitempty"`
	// sent to master one at a time, after the initial heartbeat
	ShardInfo *ShardInfo `protobuf:"bytes,2,opt,name=ShardInfo" json:"ShardInfo,omitempty"`
}

func (m *StoreHeartbeat) Reset()                    { *m = StoreHeartbeat{} }
func (m *StoreHeartbeat) String() string            { return proto.CompactTextString(m) }
func (*StoreHeartbeat) ProtoMessage()               {}
func (*StoreHeartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StoreHeartbeat) GetStoreResource() *StoreResource {
	if m != nil {
		return m.StoreResource
	}
	return nil
}

func (m *StoreHeartbeat) GetShardInfo() *ShardInfo {
	if m != nil {
		return m.ShardInfo
	}
	return nil
}

type StoreMessage struct {
}

func (m *StoreMessage) Reset()                    { *m = StoreMessage{} }
func (m *StoreMessage) String() string            { return proto.CompactTextString(m) }
func (*StoreMessage) ProtoMessage()               {}
func (*StoreMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ClientHeartbeat struct {
	DataCenter    string                                `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	ClusterFollow *ClientHeartbeat_ClusterFollowMessage `protobuf:"bytes,2,opt,name=cluster_follow,json=clusterFollow" json:"cluster_follow,omitempty"`
}

func (m *ClientHeartbeat) Reset()                    { *m = ClientHeartbeat{} }
func (m *ClientHeartbeat) String() string            { return proto.CompactTextString(m) }
func (*ClientHeartbeat) ProtoMessage()               {}
func (*ClientHeartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ClientHeartbeat) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *ClientHeartbeat) GetClusterFollow() *ClientHeartbeat_ClusterFollowMessage {
	if m != nil {
		return m.ClusterFollow
	}
	return nil
}

type ClientHeartbeat_ClusterFollowMessage struct {
	Keyspace   string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	IsUnfollow bool   `protobuf:"varint,2,opt,name=is_unfollow,json=isUnfollow" json:"is_unfollow,omitempty"`
}

func (m *ClientHeartbeat_ClusterFollowMessage) Reset()         { *m = ClientHeartbeat_ClusterFollowMessage{} }
func (m *ClientHeartbeat_ClusterFollowMessage) String() string { return proto.CompactTextString(m) }
func (*ClientHeartbeat_ClusterFollowMessage) ProtoMessage()    {}
func (*ClientHeartbeat_ClusterFollowMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

func (m *ClientHeartbeat_ClusterFollowMessage) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *ClientHeartbeat_ClusterFollowMessage) GetIsUnfollow() bool {
	if m != nil {
		return m.IsUnfollow
	}
	return false
}

type ClientMessage struct {
	Cluster *Cluster                           `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Updates *ClientMessage_StoreResourceUpdate `protobuf:"bytes,2,opt,name=updates" json:"updates,omitempty"`
	Resize  *ClientMessage_Resize              `protobuf:"bytes,3,opt,name=resize" json:"resize,omitempty"`
}

func (m *ClientMessage) Reset()                    { *m = ClientMessage{} }
func (m *ClientMessage) String() string            { return proto.CompactTextString(m) }
func (*ClientMessage) ProtoMessage()               {}
func (*ClientMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ClientMessage) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ClientMessage) GetUpdates() *ClientMessage_StoreResourceUpdate {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *ClientMessage) GetResize() *ClientMessage_Resize {
	if m != nil {
		return m.Resize
	}
	return nil
}

type ClientMessage_StoreResourceUpdate struct {
	Nodes       []*ClusterNode `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	IsDelete    bool           `protobuf:"varint,2,opt,name=is_delete,json=isDelete" json:"is_delete,omitempty"`
	Keyspace    string         `protobuf:"bytes,3,opt,name=keyspace" json:"keyspace,omitempty"`
	IsPromotion bool           `protobuf:"varint,4,opt,name=is_promotion,json=isPromotion" json:"is_promotion,omitempty"`
}

func (m *ClientMessage_StoreResourceUpdate) Reset()         { *m = ClientMessage_StoreResourceUpdate{} }
func (m *ClientMessage_StoreResourceUpdate) String() string { return proto.CompactTextString(m) }
func (*ClientMessage_StoreResourceUpdate) ProtoMessage()    {}
func (*ClientMessage_StoreResourceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

func (m *ClientMessage_StoreResourceUpdate) GetNodes() []*ClusterNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ClientMessage_StoreResourceUpdate) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *ClientMessage_StoreResourceUpdate) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *ClientMessage_StoreResourceUpdate) GetIsPromotion() bool {
	if m != nil {
		return m.IsPromotion
	}
	return false
}

type ClientMessage_Resize struct {
	CurrentClusterSize uint32 `protobuf:"varint,1,opt,name=current_cluster_size,json=currentClusterSize" json:"current_cluster_size,omitempty"`
	NextClusterSize    uint32 `protobuf:"varint,2,opt,name=next_cluster_size,json=nextClusterSize" json:"next_cluster_size,omitempty"`
	Keyspace           string `protobuf:"bytes,3,opt,name=keyspace" json:"keyspace,omitempty"`
}

func (m *ClientMessage_Resize) Reset()                    { *m = ClientMessage_Resize{} }
func (m *ClientMessage_Resize) String() string            { return proto.CompactTextString(m) }
func (*ClientMessage_Resize) ProtoMessage()               {}
func (*ClientMessage_Resize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 1} }

func (m *ClientMessage_Resize) GetCurrentClusterSize() uint32 {
	if m != nil {
		return m.CurrentClusterSize
	}
	return 0
}

func (m *ClientMessage_Resize) GetNextClusterSize() uint32 {
	if m != nil {
		return m.NextClusterSize
	}
	return 0
}

func (m *ClientMessage_Resize) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

type Cluster struct {
	Keyspace            string         `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	DataCenter          string         `protobuf:"bytes,2,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	Nodes               []*ClusterNode `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
	ExpectedClusterSize uint32         `protobuf:"varint,4,opt,name=expected_cluster_size,json=expectedClusterSize" json:"expected_cluster_size,omitempty"`
	CurrentClusterSize  uint32         `protobuf:"varint,5,opt,name=current_cluster_size,json=currentClusterSize" json:"current_cluster_size,omitempty"`
	ReplicationFactor   uint32         `protobuf:"varint,6,opt,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Cluster) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *Cluster) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *Cluster) GetNodes() []*ClusterNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Cluster) GetExpectedClusterSize() uint32 {
	if m != nil {
		return m.ExpectedClusterSize
	}
	return 0
}

func (m *Cluster) GetCurrentClusterSize() uint32 {
	if m != nil {
		return m.CurrentClusterSize
	}
	return 0
}

func (m *Cluster) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

// denormalized
type ClusterNode struct {
	StoreResource *StoreResource `protobuf:"bytes,1,opt,name=store_resource,json=storeResource" json:"store_resource,omitempty"`
	ShardInfo     *ShardInfo     `protobuf:"bytes,2,opt,name=shard_info,json=shardInfo" json:"shard_info,omitempty"`
}

func (m *ClusterNode) Reset()                    { *m = ClusterNode{} }
func (m *ClusterNode) String() string            { return proto.CompactTextString(m) }
func (*ClusterNode) ProtoMessage()               {}
func (*ClusterNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClusterNode) GetStoreResource() *StoreResource {
	if m != nil {
		return m.StoreResource
	}
	return nil
}

func (m *ClusterNode) GetShardInfo() *ShardInfo {
	if m != nil {
		return m.ShardInfo
	}
	return nil
}

type StoreResource struct {
	DataCenter      string   `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	Network         string   `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	Address         string   `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	AdminAddress    string   `protobuf:"bytes,4,opt,name=admin_address,json=adminAddress" json:"admin_address,omitempty"`
	Tags            []string `protobuf:"bytes,7,rep,name=tags" json:"tags,omitempty"`
	DiskSizeGb      uint32   `protobuf:"varint,8,opt,name=disk_size_gb,json=diskSizeGb" json:"disk_size_gb,omitempty"`
	AllocatedSizeGb uint32   `protobuf:"varint,9,opt,name=allocated_size_gb,json=allocatedSizeGb" json:"allocated_size_gb,omitempty"`
}

func (m *StoreResource) Reset()                    { *m = StoreResource{} }
func (m *StoreResource) String() string            { return proto.CompactTextString(m) }
func (*StoreResource) ProtoMessage()               {}
func (*StoreResource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StoreResource) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *StoreResource) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *StoreResource) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StoreResource) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *StoreResource) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *StoreResource) GetDiskSizeGb() uint32 {
	if m != nil {
		return m.DiskSizeGb
	}
	return 0
}

func (m *StoreResource) GetAllocatedSizeGb() uint32 {
	if m != nil {
		return m.AllocatedSizeGb
	}
	return 0
}

// LocalShardsInCluster is saved to and load from disk
type LocalShardsInCluster struct {
	Id       uint32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ShardMap map[uint32]*ShardInfo `protobuf:"bytes,2,rep,name=shard_map,json=shardMap" json:"shard_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// duplicated info, need to validate on master when reconvene
	ClusterSize uint32 `protobuf:"varint,3,opt,name=cluster_size,json=clusterSize" json:"cluster_size,omitempty"`
	// duplicated info, need to validate on master when reconvene
	ReplicationFactor uint32 `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
}

func (m *LocalShardsInCluster) Reset()                    { *m = LocalShardsInCluster{} }
func (m *LocalShardsInCluster) String() string            { return proto.CompactTextString(m) }
func (*LocalShardsInCluster) ProtoMessage()               {}
func (*LocalShardsInCluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *LocalShardsInCluster) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LocalShardsInCluster) GetShardMap() map[uint32]*ShardInfo {
	if m != nil {
		return m.ShardMap
	}
	return nil
}

func (m *LocalShardsInCluster) GetClusterSize() uint32 {
	if m != nil {
		return m.ClusterSize
	}
	return 0
}

func (m *LocalShardsInCluster) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

type ShardInfo struct {
	KeyspaceName      string           `protobuf:"bytes,1,opt,name=keyspace_name,json=keyspaceName" json:"keyspace_name,omitempty"`
	NodeId            uint32           `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	ShardId           uint32           `protobuf:"varint,3,opt,name=shard_id,json=shardId" json:"shard_id,omitempty"`
	ClusterSize       uint32           `protobuf:"varint,4,opt,name=cluster_size,json=clusterSize" json:"cluster_size,omitempty"`
	ReplicationFactor uint32           `protobuf:"varint,5,opt,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
	Status            ShardInfo_Status `protobuf:"varint,6,opt,name=status,enum=pb.ShardInfo_Status" json:"status,omitempty"`
	IsCandidate       bool             `protobuf:"varint,7,opt,name=is_candidate,json=isCandidate" json:"is_candidate,omitempty"`
	IsPermanentDelete bool             `protobuf:"varint,8,opt,name=is_permanent_delete,json=isPermanentDelete" json:"is_permanent_delete,omitempty"`
}

func (m *ShardInfo) Reset()                    { *m = ShardInfo{} }
func (m *ShardInfo) String() string            { return proto.CompactTextString(m) }
func (*ShardInfo) ProtoMessage()               {}
func (*ShardInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ShardInfo) GetKeyspaceName() string {
	if m != nil {
		return m.KeyspaceName
	}
	return ""
}

func (m *ShardInfo) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ShardInfo) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *ShardInfo) GetClusterSize() uint32 {
	if m != nil {
		return m.ClusterSize
	}
	return 0
}

func (m *ShardInfo) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *ShardInfo) GetStatus() ShardInfo_Status {
	if m != nil {
		return m.Status
	}
	return ShardInfo_EMPTY
}

func (m *ShardInfo) GetIsCandidate() bool {
	if m != nil {
		return m.IsCandidate
	}
	return false
}

func (m *ShardInfo) GetIsPermanentDelete() bool {
	if m != nil {
		return m.IsPermanentDelete
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// ////////////////////////////////////////////////
// // data queries
// ////////////////////////////////////////////////
type Requests struct {
	Keyspace string     `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	Requests []*Request `protobuf:"bytes,2,rep,name=requests" json:"requests,omitempty"`
}

func (m *Requests) Reset()                    { *m = Requests{} }
func (m *Requests) String() string            { return proto.CompactTextString(m) }
func (*Requests) ProtoMessage()               {}
func (*Requests) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Requests) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *Requests) GetRequests() []*Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

type Responses struct {
	Responses []*Response `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *Responses) Reset()                    { *m = Responses{} }
func (m *Responses) String() string            { return proto.CompactTextString(m) }
func (*Responses) ProtoMessage()               {}
func (*Responses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Responses) GetResponses() []*Response {
	if m != nil {
		return m.Responses
	}
	return nil
}

type Request struct {
	Put         *PutRequest         `protobuf:"bytes,1,opt,name=put" json:"put,omitempty"`
	Get         *GetRequest         `protobuf:"bytes,2,opt,name=get" json:"get,omitempty"`
	GetByPrefix *GetByPrefixRequest `protobuf:"bytes,3,opt,name=get_by_prefix,json=getByPrefix" json:"get_by_prefix,omitempty"`
	Delete      *DeleteRequest      `protobuf:"bytes,4,opt,name=delete" json:"delete,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Request) GetPut() *PutRequest {
	if m != nil {
		return m.Put
	}
	return nil
}

func (m *Request) GetGet() *GetRequest {
	if m != nil {
		return m.Get
	}
	return nil
}

func (m *Request) GetGetByPrefix() *GetByPrefixRequest {
	if m != nil {
		return m.GetByPrefix
	}
	return nil
}

func (m *Request) GetDelete() *DeleteRequest {
	if m != nil {
		return m.Delete
	}
	return nil
}

type PutRequest struct {
	Replica       uint32    `protobuf:"varint,1,opt,name=replica" json:"replica,omitempty"`
	PartitionHash uint64    `protobuf:"varint,2,opt,name=partition_hash,json=partitionHash" json:"partition_hash,omitempty"`
	KeyValue      *KeyValue `protobuf:"bytes,3,opt,name=key_value,json=keyValue" json:"key_value,omitempty"`
	TtlSecond     uint32    `protobuf:"varint,4,opt,name=ttl_second,json=ttlSecond" json:"ttl_second,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PutRequest) GetReplica() uint32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *PutRequest) GetPartitionHash() uint64 {
	if m != nil {
		return m.PartitionHash
	}
	return 0
}

func (m *PutRequest) GetKeyValue() *KeyValue {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *PutRequest) GetTtlSecond() uint32 {
	if m != nil {
		return m.TtlSecond
	}
	return 0
}

type PutResponse struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PutResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PutResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type DeleteRequest struct {
	Replica       uint32 `protobuf:"varint,1,opt,name=replica" json:"replica,omitempty"`
	PartitionHash uint64 `protobuf:"varint,2,opt,name=partition_hash,json=partitionHash" json:"partition_hash,omitempty"`
	Key           []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteRequest) GetReplica() uint32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *DeleteRequest) GetPartitionHash() uint64 {
	if m != nil {
		return m.PartitionHash
	}
	return 0
}

func (m *DeleteRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteResponse struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DeleteResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *DeleteResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetRequest struct {
	Replica uint32 `protobuf:"varint,1,opt,name=replica" json:"replica,omitempty"`
	Key     []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetRequest) GetReplica() uint32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *GetRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetResponse struct {
	Ok       bool      `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Status   string    `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	KeyValue *KeyValue `protobuf:"bytes,3,opt,name=key_value,json=keyValue" json:"key_value,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetResponse) GetKeyValue() *KeyValue {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

type GetByPrefixRequest struct {
	Replica     uint32 `protobuf:"varint,1,opt,name=replica" json:"replica,omitempty"`
	Prefix      []byte `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Limit       uint32 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
	LastSeenKey []byte `protobuf:"bytes,4,opt,name=last_seen_key,json=lastSeenKey,proto3" json:"last_seen_key,omitempty"`
}

func (m *GetByPrefixRequest) Reset()                    { *m = GetByPrefixRequest{} }
func (m *GetByPrefixRequest) String() string            { return proto.CompactTextString(m) }
func (*GetByPrefixRequest) ProtoMessage()               {}
func (*GetByPrefixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetByPrefixRequest) GetReplica() uint32 {
	if m != nil {
		return m.Replica
	}
	return 0
}

func (m *GetByPrefixRequest) GetPrefix() []byte {
	if m != nil {
		return m.Prefix
	}
	return nil
}

func (m *GetByPrefixRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetByPrefixRequest) GetLastSeenKey() []byte {
	if m != nil {
		return m.LastSeenKey
	}
	return nil
}

type GetByPrefixResponse struct {
	Ok        bool        `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Status    string      `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	KeyValues []*KeyValue `protobuf:"bytes,3,rep,name=key_values,json=keyValues" json:"key_values,omitempty"`
}

func (m *GetByPrefixResponse) Reset()                    { *m = GetByPrefixResponse{} }
func (m *GetByPrefixResponse) String() string            { return proto.CompactTextString(m) }
func (*GetByPrefixResponse) ProtoMessage()               {}
func (*GetByPrefixResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetByPrefixResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GetByPrefixResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetByPrefixResponse) GetKeyValues() []*KeyValue {
	if m != nil {
		return m.KeyValues
	}
	return nil
}

type Response struct {
	Put         *PutResponse         `protobuf:"bytes,1,opt,name=put" json:"put,omitempty"`
	Get         *GetResponse         `protobuf:"bytes,2,opt,name=get" json:"get,omitempty"`
	GetByPrefix *GetByPrefixResponse `protobuf:"bytes,3,opt,name=get_by_prefix,json=getByPrefix" json:"get_by_prefix,omitempty"`
	Delete      *DeleteResponse      `protobuf:"bytes,4,opt,name=delete" json:"delete,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Response) GetPut() *PutResponse {
	if m != nil {
		return m.Put
	}
	return nil
}

func (m *Response) GetGet() *GetResponse {
	if m != nil {
		return m.Get
	}
	return nil
}

func (m *Response) GetGetByPrefix() *GetByPrefixResponse {
	if m != nil {
		return m.GetByPrefix
	}
	return nil
}

func (m *Response) GetDelete() *DeleteResponse {
	if m != nil {
		return m.Delete
	}
	return nil
}

type KeyValue struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// ////////////////////////////////////////////////
// // data copying
// ////////////////////////////////////////////////
type CopyDoneMessge struct {
	Shard           int32 `protobuf:"varint,1,opt,name=shard" json:"shard,omitempty"`
	CopyStartTimeNs int64 `protobuf:"varint,2,opt,name=copy_start_time_ns,json=copyStartTimeNs" json:"copy_start_time_ns,omitempty"`
}

func (m *CopyDoneMessge) Reset()                    { *m = CopyDoneMessge{} }
func (m *CopyDoneMessge) String() string            { return proto.CompactTextString(m) }
func (*CopyDoneMessge) ProtoMessage()               {}
func (*CopyDoneMessge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CopyDoneMessge) GetShard() int32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

func (m *CopyDoneMessge) GetCopyStartTimeNs() int64 {
	if m != nil {
		return m.CopyStartTimeNs
	}
	return 0
}

type BootstrapCopyRequest struct {
	Keyspace          string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	ShardId           uint32 `protobuf:"varint,2,opt,name=shard_id,json=shardId" json:"shard_id,omitempty"`
	TargetShardId     uint32 `protobuf:"varint,3,opt,name=target_shard_id,json=targetShardId" json:"target_shard_id,omitempty"`
	TargetClusterSize uint32 `protobuf:"varint,4,opt,name=target_cluster_size,json=targetClusterSize" json:"target_cluster_size,omitempty"`
	Origin            string `protobuf:"bytes,5,opt,name=origin" json:"origin,omitempty"`
}

func (m *BootstrapCopyRequest) Reset()                    { *m = BootstrapCopyRequest{} }
func (m *BootstrapCopyRequest) String() string            { return proto.CompactTextString(m) }
func (*BootstrapCopyRequest) ProtoMessage()               {}
func (*BootstrapCopyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BootstrapCopyRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *BootstrapCopyRequest) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *BootstrapCopyRequest) GetTargetShardId() uint32 {
	if m != nil {
		return m.TargetShardId
	}
	return 0
}

func (m *BootstrapCopyRequest) GetTargetClusterSize() uint32 {
	if m != nil {
		return m.TargetClusterSize
	}
	return 0
}

func (m *BootstrapCopyRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

type BootstrapCopyResponse struct {
	KeyValues          []*KeyValue                               `protobuf:"bytes,1,rep,name=key_values,json=keyValues" json:"key_values,omitempty"`
	BinlogTailProgress *BootstrapCopyResponse_BinlogTailProgress `protobuf:"bytes,2,opt,name=binlogTailProgress" json:"binlogTailProgress,omitempty"`
}

func (m *BootstrapCopyResponse) Reset()                    { *m = BootstrapCopyResponse{} }
func (m *BootstrapCopyResponse) String() string            { return proto.CompactTextString(m) }
func (*BootstrapCopyResponse) ProtoMessage()               {}
func (*BootstrapCopyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *BootstrapCopyResponse) GetKeyValues() []*KeyValue {
	if m != nil {
		return m.KeyValues
	}
	return nil
}

func (m *BootstrapCopyResponse) GetBinlogTailProgress() *BootstrapCopyResponse_BinlogTailProgress {
	if m != nil {
		return m.BinlogTailProgress
	}
	return nil
}

// this message is only sent at the end of copying
type BootstrapCopyResponse_BinlogTailProgress struct {
	Segment uint32 `protobuf:"varint,1,opt,name=segment" json:"segment,omitempty"`
	Offset  uint64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *BootstrapCopyResponse_BinlogTailProgress) Reset() {
	*m = BootstrapCopyResponse_BinlogTailProgress{}
}
func (m *BootstrapCopyResponse_BinlogTailProgress) String() string { return proto.CompactTextString(m) }
func (*BootstrapCopyResponse_BinlogTailProgress) ProtoMessage()    {}
func (*BootstrapCopyResponse_BinlogTailProgress) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

func (m *BootstrapCopyResponse_BinlogTailProgress) GetSegment() uint32 {
	if m != nil {
		return m.Segment
	}
	return 0
}

func (m *BootstrapCopyResponse_BinlogTailProgress) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type PullUpdateRequest struct {
	Keyspace          string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	ShardId           uint32 `protobuf:"varint,2,opt,name=shard_id,json=shardId" json:"shard_id,omitempty"`
	Segment           uint32 `protobuf:"varint,3,opt,name=segment" json:"segment,omitempty"`
	Offset            uint64 `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
	Limit             uint32 `protobuf:"varint,5,opt,name=limit" json:"limit,omitempty"`
	TargetShardId     uint32 `protobuf:"varint,6,opt,name=target_shard_id,json=targetShardId" json:"target_shard_id,omitempty"`
	TargetClusterSize uint32 `protobuf:"varint,7,opt,name=target_cluster_size,json=targetClusterSize" json:"target_cluster_size,omitempty"`
	Origin            string `protobuf:"bytes,8,opt,name=origin" json:"origin,omitempty"`
}

func (m *PullUpdateRequest) Reset()                    { *m = PullUpdateRequest{} }
func (m *PullUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*PullUpdateRequest) ProtoMessage()               {}
func (*PullUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PullUpdateRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *PullUpdateRequest) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *PullUpdateRequest) GetSegment() uint32 {
	if m != nil {
		return m.Segment
	}
	return 0
}

func (m *PullUpdateRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *PullUpdateRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PullUpdateRequest) GetTargetShardId() uint32 {
	if m != nil {
		return m.TargetShardId
	}
	return 0
}

func (m *PullUpdateRequest) GetTargetClusterSize() uint32 {
	if m != nil {
		return m.TargetClusterSize
	}
	return 0
}

func (m *PullUpdateRequest) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

type PullUpdateResponse struct {
	NextSegment uint32         `protobuf:"varint,1,opt,name=next_segment,json=nextSegment" json:"next_segment,omitempty"`
	NextOffset  uint64         `protobuf:"varint,2,opt,name=next_offset,json=nextOffset" json:"next_offset,omitempty"`
	Entries     []*UpdateEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	OutOfSync   bool           `protobuf:"varint,4,opt,name=out_of_sync,json=outOfSync" json:"out_of_sync,omitempty"`
}

func (m *PullUpdateResponse) Reset()                    { *m = PullUpdateResponse{} }
func (m *PullUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*PullUpdateResponse) ProtoMessage()               {}
func (*PullUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PullUpdateResponse) GetNextSegment() uint32 {
	if m != nil {
		return m.NextSegment
	}
	return 0
}

func (m *PullUpdateResponse) GetNextOffset() uint64 {
	if m != nil {
		return m.NextOffset
	}
	return 0
}

func (m *PullUpdateResponse) GetEntries() []*UpdateEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *PullUpdateResponse) GetOutOfSync() bool {
	if m != nil {
		return m.OutOfSync
	}
	return false
}

type UpdateEntry struct {
	PartitionHash uint64 `protobuf:"varint,3,opt,name=partition_hash,json=partitionHash" json:"partition_hash,omitempty"`
	UpdatedAtNs   uint64 `protobuf:"varint,4,opt,name=updated_at_ns,json=updatedAtNs" json:"updated_at_ns,omitempty"`
	TtlSecond     uint32 `protobuf:"varint,5,opt,name=ttl_second,json=ttlSecond" json:"ttl_second,omitempty"`
	Crc           uint32 `protobuf:"varint,6,opt,name=crc" json:"crc,omitempty"`
	IsDelete      bool   `protobuf:"varint,7,opt,name=isDelete" json:"isDelete,omitempty"`
	Key           []byte `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte `protobuf:"bytes,9,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UpdateEntry) Reset()                    { *m = UpdateEntry{} }
func (m *UpdateEntry) String() string            { return proto.CompactTextString(m) }
func (*UpdateEntry) ProtoMessage()               {}
func (*UpdateEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UpdateEntry) GetPartitionHash() uint64 {
	if m != nil {
		return m.PartitionHash
	}
	return 0
}

func (m *UpdateEntry) GetUpdatedAtNs() uint64 {
	if m != nil {
		return m.UpdatedAtNs
	}
	return 0
}

func (m *UpdateEntry) GetTtlSecond() uint32 {
	if m != nil {
		return m.TtlSecond
	}
	return 0
}

func (m *UpdateEntry) GetCrc() uint32 {
	if m != nil {
		return m.Crc
	}
	return 0
}

func (m *UpdateEntry) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *UpdateEntry) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *UpdateEntry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CheckBinlogRequest struct {
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	NodeId   uint32 `protobuf:"varint,2,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *CheckBinlogRequest) Reset()                    { *m = CheckBinlogRequest{} }
func (m *CheckBinlogRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckBinlogRequest) ProtoMessage()               {}
func (*CheckBinlogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CheckBinlogRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *CheckBinlogRequest) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

type CheckBinlogResponse struct {
	NodeId          uint32 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	EarliestSegment uint32 `protobuf:"varint,2,opt,name=earliest_segment,json=earliestSegment" json:"earliest_segment,omitempty"`
	LatestSegment   uint32 `protobuf:"varint,3,opt,name=latest_segment,json=latestSegment" json:"latest_segment,omitempty"`
}

func (m *CheckBinlogResponse) Reset()                    { *m = CheckBinlogResponse{} }
func (m *CheckBinlogResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckBinlogResponse) ProtoMessage()               {}
func (*CheckBinlogResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CheckBinlogResponse) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *CheckBinlogResponse) GetEarliestSegment() uint32 {
	if m != nil {
		return m.EarliestSegment
	}
	return 0
}

func (m *CheckBinlogResponse) GetLatestSegment() uint32 {
	if m != nil {
		return m.LatestSegment
	}
	return 0
}

// ////////////////////////////////////////////////
// // admin
// ////////////////////////////////////////////////
type DescribeRequest struct {
	DescDataCenters *DescribeRequest_DescDataCenters `protobuf:"bytes,1,opt,name=desc_data_centers,json=descDataCenters" json:"desc_data_centers,omitempty"`
	DescKeyspaces   *DescribeRequest_DescKeyspaces   `protobuf:"bytes,2,opt,name=desc_keyspaces,json=descKeyspaces" json:"desc_keyspaces,omitempty"`
	DescCluster     *DescribeRequest_DescCluster     `protobuf:"bytes,3,opt,name=desc_cluster,json=descCluster" json:"desc_cluster,omitempty"`
	DescClients     *DescribeRequest_DescClients     `protobuf:"bytes,4,opt,name=desc_clients,json=descClients" json:"desc_clients,omitempty"`
}

func (m *DescribeRequest) Reset()                    { *m = DescribeRequest{} }
func (m *DescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest) ProtoMessage()               {}
func (*DescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DescribeRequest) GetDescDataCenters() *DescribeRequest_DescDataCenters {
	if m != nil {
		return m.DescDataCenters
	}
	return nil
}

func (m *DescribeRequest) GetDescKeyspaces() *DescribeRequest_DescKeyspaces {
	if m != nil {
		return m.DescKeyspaces
	}
	return nil
}

func (m *DescribeRequest) GetDescCluster() *DescribeRequest_DescCluster {
	if m != nil {
		return m.DescCluster
	}
	return nil
}

func (m *DescribeRequest) GetDescClients() *DescribeRequest_DescClients {
	if m != nil {
		return m.DescClients
	}
	return nil
}

type DescribeRequest_DescDataCenters struct {
}

func (m *DescribeRequest_DescDataCenters) Reset()         { *m = DescribeRequest_DescDataCenters{} }
func (m *DescribeRequest_DescDataCenters) String() string { return proto.CompactTextString(m) }
func (*DescribeRequest_DescDataCenters) ProtoMessage()    {}
func (*DescribeRequest_DescDataCenters) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0}
}

type DescribeRequest_DescKeyspaces struct {
}

func (m *DescribeRequest_DescKeyspaces) Reset()         { *m = DescribeRequest_DescKeyspaces{} }
func (m *DescribeRequest_DescKeyspaces) String() string { return proto.CompactTextString(m) }
func (*DescribeRequest_DescKeyspaces) ProtoMessage()    {}
func (*DescribeRequest_DescKeyspaces) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 1}
}

type DescribeRequest_DescCluster struct {
	Keyspace   string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	DataCenter string `protobuf:"bytes,2,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
}

func (m *DescribeRequest_DescCluster) Reset()                    { *m = DescribeRequest_DescCluster{} }
func (m *DescribeRequest_DescCluster) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest_DescCluster) ProtoMessage()               {}
func (*DescribeRequest_DescCluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32, 2} }

func (m *DescribeRequest_DescCluster) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *DescribeRequest_DescCluster) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

type DescribeRequest_DescClients struct {
}

func (m *DescribeRequest_DescClients) Reset()                    { *m = DescribeRequest_DescClients{} }
func (m *DescribeRequest_DescClients) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest_DescClients) ProtoMessage()               {}
func (*DescribeRequest_DescClients) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32, 3} }

type DescribeResponse struct {
	DescDataCenters *DescribeResponse_DescDataCenters `protobuf:"bytes,1,opt,name=desc_data_centers,json=descDataCenters" json:"desc_data_centers,omitempty"`
	DescKeyspaces   *DescribeResponse_DescKeyspaces   `protobuf:"bytes,2,opt,name=desc_keyspaces,json=descKeyspaces" json:"desc_keyspaces,omitempty"`
	DescCluster     *DescribeResponse_DescCluster     `protobuf:"bytes,3,opt,name=desc_cluster,json=descCluster" json:"desc_cluster,omitempty"`
	ClientCount     uint32                            `protobuf:"varint,4,opt,name=client_count,json=clientCount" json:"client_count,omitempty"`
}

func (m *DescribeResponse) Reset()                    { *m = DescribeResponse{} }
func (m *DescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResponse) ProtoMessage()               {}
func (*DescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *DescribeResponse) GetDescDataCenters() *DescribeResponse_DescDataCenters {
	if m != nil {
		return m.DescDataCenters
	}
	return nil
}

func (m *DescribeResponse) GetDescKeyspaces() *DescribeResponse_DescKeyspaces {
	if m != nil {
		return m.DescKeyspaces
	}
	return nil
}

func (m *DescribeResponse) GetDescCluster() *DescribeResponse_DescCluster {
	if m != nil {
		return m.DescCluster
	}
	return nil
}

func (m *DescribeResponse) GetClientCount() uint32 {
	if m != nil {
		return m.ClientCount
	}
	return 0
}

type DescribeResponse_DescDataCenters struct {
	DataCenters []*DescribeResponse_DescDataCenters_DataCenter `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters" json:"data_centers,omitempty"`
}

func (m *DescribeResponse_DescDataCenters) Reset()         { *m = DescribeResponse_DescDataCenters{} }
func (m *DescribeResponse_DescDataCenters) String() string { return proto.CompactTextString(m) }
func (*DescribeResponse_DescDataCenters) ProtoMessage()    {}
func (*DescribeResponse_DescDataCenters) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 0}
}

func (m *DescribeResponse_DescDataCenters) GetDataCenters() []*DescribeResponse_DescDataCenters_DataCenter {
	if m != nil {
		return m.DataCenters
	}
	return nil
}

type DescribeResponse_DescDataCenters_DataCenter struct {
	DataCenter     string           `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	StoreResources []*StoreResource `protobuf:"bytes,2,rep,name=store_resources,json=storeResources" json:"store_resources,omitempty"`
	ClientCount    uint32           `protobuf:"varint,3,opt,name=client_count,json=clientCount" json:"client_count,omitempty"`
}

func (m *DescribeResponse_DescDataCenters_DataCenter) Reset() {
	*m = DescribeResponse_DescDataCenters_DataCenter{}
}
func (m *DescribeResponse_DescDataCenters_DataCenter) String() string {
	return proto.CompactTextString(m)
}
func (*DescribeResponse_DescDataCenters_DataCenter) ProtoMessage() {}
func (*DescribeResponse_DescDataCenters_DataCenter) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 0, 0}
}

func (m *DescribeResponse_DescDataCenters_DataCenter) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *DescribeResponse_DescDataCenters_DataCenter) GetStoreResources() []*StoreResource {
	if m != nil {
		return m.StoreResources
	}
	return nil
}

func (m *DescribeResponse_DescDataCenters_DataCenter) GetClientCount() uint32 {
	if m != nil {
		return m.ClientCount
	}
	return 0
}

type DescribeResponse_DescKeyspaces struct {
	Keyspaces []*DescribeResponse_DescKeyspaces_Keyspace `protobuf:"bytes,1,rep,name=keyspaces" json:"keyspaces,omitempty"`
}

func (m *DescribeResponse_DescKeyspaces) Reset()         { *m = DescribeResponse_DescKeyspaces{} }
func (m *DescribeResponse_DescKeyspaces) String() string { return proto.CompactTextString(m) }
func (*DescribeResponse_DescKeyspaces) ProtoMessage()    {}
func (*DescribeResponse_DescKeyspaces) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 1}
}

func (m *DescribeResponse_DescKeyspaces) GetKeyspaces() []*DescribeResponse_DescKeyspaces_Keyspace {
	if m != nil {
		return m.Keyspaces
	}
	return nil
}

type DescribeResponse_DescKeyspaces_Keyspace struct {
	Keyspace    string     `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	Clusters    []*Cluster `protobuf:"bytes,2,rep,name=clusters" json:"clusters,omitempty"`
	ClientCount uint32     `protobuf:"varint,3,opt,name=client_count,json=clientCount" json:"client_count,omitempty"`
}

func (m *DescribeResponse_DescKeyspaces_Keyspace) Reset() {
	*m = DescribeResponse_DescKeyspaces_Keyspace{}
}
func (m *DescribeResponse_DescKeyspaces_Keyspace) String() string { return proto.CompactTextString(m) }
func (*DescribeResponse_DescKeyspaces_Keyspace) ProtoMessage()    {}
func (*DescribeResponse_DescKeyspaces_Keyspace) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 1, 0}
}

func (m *DescribeResponse_DescKeyspaces_Keyspace) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *DescribeResponse_DescKeyspaces_Keyspace) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *DescribeResponse_DescKeyspaces_Keyspace) GetClientCount() uint32 {
	if m != nil {
		return m.ClientCount
	}
	return 0
}

type DescribeResponse_DescCluster struct {
	Cluster     *Cluster `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	NextCluster *Cluster `protobuf:"bytes,2,opt,name=next_cluster,json=nextCluster" json:"next_cluster,omitempty"`
	ClientCount uint32   `protobuf:"varint,3,opt,name=client_count,json=clientCount" json:"client_count,omitempty"`
}

func (m *DescribeResponse_DescCluster) Reset()         { *m = DescribeResponse_DescCluster{} }
func (m *DescribeResponse_DescCluster) String() string { return proto.CompactTextString(m) }
func (*DescribeResponse_DescCluster) ProtoMessage()    {}
func (*DescribeResponse_DescCluster) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33, 2}
}

func (m *DescribeResponse_DescCluster) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *DescribeResponse_DescCluster) GetNextCluster() *Cluster {
	if m != nil {
		return m.NextCluster
	}
	return nil
}

func (m *DescribeResponse_DescCluster) GetClientCount() uint32 {
	if m != nil {
		return m.ClientCount
	}
	return 0
}

type CreateClusterRequest struct {
	DataCenter        string   `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	Keyspace          string   `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	ClusterSize       uint32   `protobuf:"varint,3,opt,name=cluster_size,json=clusterSize" json:"cluster_size,omitempty"`
	ReplicationFactor uint32   `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
	TotalDiskSizeGb   uint32   `protobuf:"varint,5,opt,name=total_disk_size_gb,json=totalDiskSizeGb" json:"total_disk_size_gb,omitempty"`
	Tags              []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
}

func (m *CreateClusterRequest) Reset()                    { *m = CreateClusterRequest{} }
func (m *CreateClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterRequest) ProtoMessage()               {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *CreateClusterRequest) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *CreateClusterRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *CreateClusterRequest) GetClusterSize() uint32 {
	if m != nil {
		return m.ClusterSize
	}
	return 0
}

func (m *CreateClusterRequest) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *CreateClusterRequest) GetTotalDiskSizeGb() uint32 {
	if m != nil {
		return m.TotalDiskSizeGb
	}
	return 0
}

func (m *CreateClusterRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type CreateClusterResponse struct {
	Error   string   `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Cluster *Cluster `protobuf:"bytes,2,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *CreateClusterResponse) Reset()                    { *m = CreateClusterResponse{} }
func (m *CreateClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterResponse) ProtoMessage()               {}
func (*CreateClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CreateClusterResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *CreateClusterResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

type DeleteClusterRequest struct {
	DataCenter string `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	Keyspace   string `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
}

func (m *DeleteClusterRequest) Reset()                    { *m = DeleteClusterRequest{} }
func (m *DeleteClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteClusterRequest) ProtoMessage()               {}
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *DeleteClusterRequest) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *DeleteClusterRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

type DeleteClusterResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteClusterResponse) Reset()                    { *m = DeleteClusterResponse{} }
func (m *DeleteClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteClusterResponse) ProtoMessage()               {}
func (*DeleteClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DeleteClusterResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ReplaceNodeRequest struct {
	DataCenter string `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	Keyspace   string `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	NodeId     uint32 `protobuf:"varint,3,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	NewAddress string `protobuf:"bytes,4,opt,name=new_address,json=newAddress" json:"new_address,omitempty"`
}

func (m *ReplaceNodeRequest) Reset()                    { *m = ReplaceNodeRequest{} }
func (m *ReplaceNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplaceNodeRequest) ProtoMessage()               {}
func (*ReplaceNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ReplaceNodeRequest) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *ReplaceNodeRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *ReplaceNodeRequest) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ReplaceNodeRequest) GetNewAddress() string {
	if m != nil {
		return m.NewAddress
	}
	return ""
}

type ReplaceNodeResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ReplaceNodeResponse) Reset()                    { *m = ReplaceNodeResponse{} }
func (m *ReplaceNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*ReplaceNodeResponse) ProtoMessage()               {}
func (*ReplaceNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ReplaceNodeResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// //////  request response with store
type CreateShardRequest struct {
	Keyspace          string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	ShardId           uint32 `protobuf:"varint,2,opt,name=shard_id,json=shardId" json:"shard_id,omitempty"`
	ClusterSize       uint32 `protobuf:"varint,3,opt,name=cluster_size,json=clusterSize" json:"cluster_size,omitempty"`
	ReplicationFactor uint32 `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
	ShardDiskSizeGb   uint32 `protobuf:"varint,5,opt,name=shard_disk_size_gb,json=shardDiskSizeGb" json:"shard_disk_size_gb,omitempty"`
}

func (m *CreateShardRequest) Reset()                    { *m = CreateShardRequest{} }
func (m *CreateShardRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateShardRequest) ProtoMessage()               {}
func (*CreateShardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CreateShardRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *CreateShardRequest) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *CreateShardRequest) GetClusterSize() uint32 {
	if m != nil {
		return m.ClusterSize
	}
	return 0
}

func (m *CreateShardRequest) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

func (m *CreateShardRequest) GetShardDiskSizeGb() uint32 {
	if m != nil {
		return m.ShardDiskSizeGb
	}
	return 0
}

type CreateShardResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *CreateShardResponse) Reset()                    { *m = CreateShardResponse{} }
func (m *CreateShardResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateShardResponse) ProtoMessage()               {}
func (*CreateShardResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CreateShardResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type DeleteKeyspaceRequest struct {
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
}

func (m *DeleteKeyspaceRequest) Reset()                    { *m = DeleteKeyspaceRequest{} }
func (m *DeleteKeyspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteKeyspaceRequest) ProtoMessage()               {}
func (*DeleteKeyspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *DeleteKeyspaceRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

type DeleteKeyspaceResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *DeleteKeyspaceResponse) Reset()                    { *m = DeleteKeyspaceResponse{} }
func (m *DeleteKeyspaceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteKeyspaceResponse) ProtoMessage()               {}
func (*DeleteKeyspaceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *DeleteKeyspaceResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ReplicateNodePrepareRequest struct {
	Keyspace          string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	ServerId          uint32 `protobuf:"varint,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	ClusterSize       uint32 `protobuf:"varint,3,opt,name=cluster_size,json=clusterSize" json:"cluster_size,omitempty"`
	ReplicationFactor uint32 `protobuf:"varint,4,opt,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
}

func (m *ReplicateNodePrepareRequest) Reset()                    { *m = ReplicateNodePrepareRequest{} }
func (m *ReplicateNodePrepareRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplicateNodePrepareRequest) ProtoMessage()               {}
func (*ReplicateNodePrepareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ReplicateNodePrepareRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *ReplicateNodePrepareRequest) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ReplicateNodePrepareRequest) GetClusterSize() uint32 {
	if m != nil {
		return m.ClusterSize
	}
	return 0
}

func (m *ReplicateNodePrepareRequest) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

type ReplicateNodePrepareResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ReplicateNodePrepareResponse) Reset()                    { *m = ReplicateNodePrepareResponse{} }
func (m *ReplicateNodePrepareResponse) String() string            { return proto.CompactTextString(m) }
func (*ReplicateNodePrepareResponse) ProtoMessage()               {}
func (*ReplicateNodePrepareResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ReplicateNodePrepareResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ReplicateNodeCommitRequest struct {
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
}

func (m *ReplicateNodeCommitRequest) Reset()                    { *m = ReplicateNodeCommitRequest{} }
func (m *ReplicateNodeCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplicateNodeCommitRequest) ProtoMessage()               {}
func (*ReplicateNodeCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *ReplicateNodeCommitRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

type ReplicateNodeCommitResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ReplicateNodeCommitResponse) Reset()                    { *m = ReplicateNodeCommitResponse{} }
func (m *ReplicateNodeCommitResponse) String() string            { return proto.CompactTextString(m) }
func (*ReplicateNodeCommitResponse) ProtoMessage()               {}
func (*ReplicateNodeCommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *ReplicateNodeCommitResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ReplicateNodeCleanupRequest struct {
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
}

func (m *ReplicateNodeCleanupRequest) Reset()                    { *m = ReplicateNodeCleanupRequest{} }
func (m *ReplicateNodeCleanupRequest) String() string            { return proto.CompactTextString(m) }
func (*ReplicateNodeCleanupRequest) ProtoMessage()               {}
func (*ReplicateNodeCleanupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ReplicateNodeCleanupRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

type ReplicateNodeCleanupResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ReplicateNodeCleanupResponse) Reset()                    { *m = ReplicateNodeCleanupResponse{} }
func (m *ReplicateNodeCleanupResponse) String() string            { return proto.CompactTextString(m) }
func (*ReplicateNodeCleanupResponse) ProtoMessage()               {}
func (*ReplicateNodeCleanupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ReplicateNodeCleanupResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ShrinkClusterPrepareRequest struct {
	Keyspace          string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	TargetClusterSize uint32 `protobuf:"varint,2,opt,name=target_cluster_size,json=targetClusterSize" json:"target_cluster_size,omitempty"`
	ReplicationFactor uint32 `protobuf:"varint,3,opt,name=replication_factor,json=replicationFactor" json:"replication_factor,omitempty"`
}

func (m *ShrinkClusterPrepareRequest) Reset()                    { *m = ShrinkClusterPrepareRequest{} }
func (m *ShrinkClusterPrepareRequest) String() string            { return proto.CompactTextString(m) }
func (*ShrinkClusterPrepareRequest) ProtoMessage()               {}
func (*ShrinkClusterPrepareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *ShrinkClusterPrepareRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *ShrinkClusterPrepareRequest) GetTargetClusterSize() uint32 {
	if m != nil {
		return m.TargetClusterSize
	}
	return 0
}

func (m *ShrinkClusterPrepareRequest) GetReplicationFactor() uint32 {
	if m != nil {
		return m.ReplicationFactor
	}
	return 0
}

type ShrinkClusterPrepareResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ShrinkClusterPrepareResponse) Reset()                    { *m = ShrinkClusterPrepareResponse{} }
func (m *ShrinkClusterPrepareResponse) String() string            { return proto.CompactTextString(m) }
func (*ShrinkClusterPrepareResponse) ProtoMessage()               {}
func (*ShrinkClusterPrepareResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *ShrinkClusterPrepareResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ShrinkClusterCommitRequest struct {
	Keyspace          string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
	TargetClusterSize uint32 `protobuf:"varint,2,opt,name=target_cluster_size,json=targetClusterSize" json:"target_cluster_size,omitempty"`
}

func (m *ShrinkClusterCommitRequest) Reset()                    { *m = ShrinkClusterCommitRequest{} }
func (m *ShrinkClusterCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*ShrinkClusterCommitRequest) ProtoMessage()               {}
func (*ShrinkClusterCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *ShrinkClusterCommitRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *ShrinkClusterCommitRequest) GetTargetClusterSize() uint32 {
	if m != nil {
		return m.TargetClusterSize
	}
	return 0
}

type ShrinkClusterCommitResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ShrinkClusterCommitResponse) Reset()                    { *m = ShrinkClusterCommitResponse{} }
func (m *ShrinkClusterCommitResponse) String() string            { return proto.CompactTextString(m) }
func (*ShrinkClusterCommitResponse) ProtoMessage()               {}
func (*ShrinkClusterCommitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ShrinkClusterCommitResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ShrinkClusterCleanupRequest struct {
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace" json:"keyspace,omitempty"`
}

func (m *ShrinkClusterCleanupRequest) Reset()                    { *m = ShrinkClusterCleanupRequest{} }
func (m *ShrinkClusterCleanupRequest) String() string            { return proto.CompactTextString(m) }
func (*ShrinkClusterCleanupRequest) ProtoMessage()               {}
func (*ShrinkClusterCleanupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *ShrinkClusterCleanupRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

type ShrinkClusterCleanupResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ShrinkClusterCleanupResponse) Reset()                    { *m = ShrinkClusterCleanupResponse{} }
func (m *ShrinkClusterCleanupResponse) String() string            { return proto.CompactTextString(m) }
func (*ShrinkClusterCleanupResponse) ProtoMessage()               {}
func (*ShrinkClusterCleanupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *ShrinkClusterCleanupResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ResizeRequest struct {
	DataCenter  string `protobuf:"bytes,1,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	Keyspace    string `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	ClusterSize uint32 `protobuf:"varint,3,opt,name=cluster_size,json=clusterSize" json:"cluster_size,omitempty"`
}

func (m *ResizeRequest) Reset()                    { *m = ResizeRequest{} }
func (m *ResizeRequest) String() string            { return proto.CompactTextString(m) }
func (*ResizeRequest) ProtoMessage()               {}
func (*ResizeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *ResizeRequest) GetDataCenter() string {
	if m != nil {
		return m.DataCenter
	}
	return ""
}

func (m *ResizeRequest) GetKeyspace() string {
	if m != nil {
		return m.Keyspace
	}
	return ""
}

func (m *ResizeRequest) GetClusterSize() uint32 {
	if m != nil {
		return m.ClusterSize
	}
	return 0
}

type ResizeResponse struct {
	Error string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (m *ResizeResponse) Reset()                    { *m = ResizeResponse{} }
func (m *ResizeResponse) String() string            { return proto.CompactTextString(m) }
func (*ResizeResponse) ProtoMessage()               {}
func (*ResizeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *ResizeResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*BalanceRequest)(nil), "pb.BalanceRequest")
	proto.RegisterType((*StoreHeartbeat)(nil), "pb.StoreHeartbeat")
	proto.RegisterType((*StoreMessage)(nil), "pb.StoreMessage")
	proto.RegisterType((*ClientHeartbeat)(nil), "pb.ClientHeartbeat")
	proto.RegisterType((*ClientHeartbeat_ClusterFollowMessage)(nil), "pb.ClientHeartbeat.ClusterFollowMessage")
	proto.RegisterType((*ClientMessage)(nil), "pb.ClientMessage")
	proto.RegisterType((*ClientMessage_StoreResourceUpdate)(nil), "pb.ClientMessage.StoreResourceUpdate")
	proto.RegisterType((*ClientMessage_Resize)(nil), "pb.ClientMessage.Resize")
	proto.RegisterType((*Cluster)(nil), "pb.Cluster")
	proto.RegisterType((*ClusterNode)(nil), "pb.ClusterNode")
	proto.RegisterType((*StoreResource)(nil), "pb.StoreResource")
	proto.RegisterType((*LocalShardsInCluster)(nil), "pb.LocalShardsInCluster")
	proto.RegisterType((*ShardInfo)(nil), "pb.ShardInfo")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Requests)(nil), "pb.Requests")
	proto.RegisterType((*Responses)(nil), "pb.Responses")
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*PutRequest)(nil), "pb.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "pb.PutResponse")
	proto.RegisterType((*DeleteRequest)(nil), "pb.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "pb.DeleteResponse")
	proto.RegisterType((*GetRequest)(nil), "pb.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "pb.GetResponse")
	proto.RegisterType((*GetByPrefixRequest)(nil), "pb.GetByPrefixRequest")
	proto.RegisterType((*GetByPrefixResponse)(nil), "pb.GetByPrefixResponse")
	proto.RegisterType((*Response)(nil), "pb.Response")
	proto.RegisterType((*KeyValue)(nil), "pb.KeyValue")
	proto.RegisterType((*CopyDoneMessge)(nil), "pb.CopyDoneMessge")
	proto.RegisterType((*BootstrapCopyRequest)(nil), "pb.BootstrapCopyRequest")
	proto.RegisterType((*BootstrapCopyResponse)(nil), "pb.BootstrapCopyResponse")
	proto.RegisterType((*BootstrapCopyResponse_BinlogTailProgress)(nil), "pb.BootstrapCopyResponse.BinlogTailProgress")
	proto.RegisterType((*PullUpdateRequest)(nil), "pb.PullUpdateRequest")
	proto.RegisterType((*PullUpdateResponse)(nil), "pb.PullUpdateResponse")
	proto.RegisterType((*UpdateEntry)(nil), "pb.UpdateEntry")
	proto.RegisterType((*CheckBinlogRequest)(nil), "pb.CheckBinlogRequest")
	proto.RegisterType((*CheckBinlogResponse)(nil), "pb.CheckBinlogResponse")
	proto.RegisterType((*DescribeRequest)(nil), "pb.DescribeRequest")
	proto.RegisterType((*DescribeRequest_DescDataCenters)(nil), "pb.DescribeRequest.DescDataCenters")
	proto.RegisterType((*DescribeRequest_DescKeyspaces)(nil), "pb.DescribeRequest.DescKeyspaces")
	proto.RegisterType((*DescribeRequest_DescCluster)(nil), "pb.DescribeRequest.DescCluster")
	proto.RegisterType((*DescribeRequest_DescClients)(nil), "pb.DescribeRequest.DescClients")
	proto.RegisterType((*DescribeResponse)(nil), "pb.DescribeResponse")
	proto.RegisterType((*DescribeResponse_DescDataCenters)(nil), "pb.DescribeResponse.DescDataCenters")
	proto.RegisterType((*DescribeResponse_DescDataCenters_DataCenter)(nil), "pb.DescribeResponse.DescDataCenters.DataCenter")
	proto.RegisterType((*DescribeResponse_DescKeyspaces)(nil), "pb.DescribeResponse.DescKeyspaces")
	proto.RegisterType((*DescribeResponse_DescKeyspaces_Keyspace)(nil), "pb.DescribeResponse.DescKeyspaces.Keyspace")
	proto.RegisterType((*DescribeResponse_DescCluster)(nil), "pb.DescribeResponse.DescCluster")
	proto.RegisterType((*CreateClusterRequest)(nil), "pb.CreateClusterRequest")
	proto.RegisterType((*CreateClusterResponse)(nil), "pb.CreateClusterResponse")
	proto.RegisterType((*DeleteClusterRequest)(nil), "pb.DeleteClusterRequest")
	proto.RegisterType((*DeleteClusterResponse)(nil), "pb.DeleteClusterResponse")
	proto.RegisterType((*ReplaceNodeRequest)(nil), "pb.ReplaceNodeRequest")
	proto.RegisterType((*ReplaceNodeResponse)(nil), "pb.ReplaceNodeResponse")
	proto.RegisterType((*CreateShardRequest)(nil), "pb.CreateShardRequest")
	proto.RegisterType((*CreateShardResponse)(nil), "pb.CreateShardResponse")
	proto.RegisterType((*DeleteKeyspaceRequest)(nil), "pb.DeleteKeyspaceRequest")
	proto.RegisterType((*DeleteKeyspaceResponse)(nil), "pb.DeleteKeyspaceResponse")
	proto.RegisterType((*ReplicateNodePrepareRequest)(nil), "pb.ReplicateNodePrepareRequest")
	proto.RegisterType((*ReplicateNodePrepareResponse)(nil), "pb.ReplicateNodePrepareResponse")
	proto.RegisterType((*ReplicateNodeCommitRequest)(nil), "pb.ReplicateNodeCommitRequest")
	proto.RegisterType((*ReplicateNodeCommitResponse)(nil), "pb.ReplicateNodeCommitResponse")
	proto.RegisterType((*ReplicateNodeCleanupRequest)(nil), "pb.ReplicateNodeCleanupRequest")
	proto.RegisterType((*ReplicateNodeCleanupResponse)(nil), "pb.ReplicateNodeCleanupResponse")
	proto.RegisterType((*ShrinkClusterPrepareRequest)(nil), "pb.ShrinkClusterPrepareRequest")
	proto.RegisterType((*ShrinkClusterPrepareResponse)(nil), "pb.ShrinkClusterPrepareResponse")
	proto.RegisterType((*ShrinkClusterCommitRequest)(nil), "pb.ShrinkClusterCommitRequest")
	proto.RegisterType((*ShrinkClusterCommitResponse)(nil), "pb.ShrinkClusterCommitResponse")
	proto.RegisterType((*ShrinkClusterCleanupRequest)(nil), "pb.ShrinkClusterCleanupRequest")
	proto.RegisterType((*ShrinkClusterCleanupResponse)(nil), "pb.ShrinkClusterCleanupResponse")
	proto.RegisterType((*ResizeRequest)(nil), "pb.ResizeRequest")
	proto.RegisterType((*ResizeResponse)(nil), "pb.ResizeResponse")
	proto.RegisterEnum("pb.ShardInfo_Status", ShardInfo_Status_name, ShardInfo_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VastoMaster service

type VastoMasterClient interface {
	RegisterStore(ctx context.Context, opts ...grpc.CallOption) (VastoMaster_RegisterStoreClient, error)
	RegisterClient(ctx context.Context, opts ...grpc.CallOption) (VastoMaster_RegisterClientClient, error)
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error)
	ResizeCluster(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeResponse, error)
	ReplaceNode(ctx context.Context, in *ReplaceNodeRequest, opts ...grpc.CallOption) (*ReplaceNodeResponse, error)
}

type vastoMasterClient struct {
	cc *grpc.ClientConn
}

func NewVastoMasterClient(cc *grpc.ClientConn) VastoMasterClient {
	return &vastoMasterClient{cc}
}

func (c *vastoMasterClient) RegisterStore(ctx context.Context, opts ...grpc.CallOption) (VastoMaster_RegisterStoreClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VastoMaster_serviceDesc.Streams[0], c.cc, "/pb.VastoMaster/RegisterStore", opts...)
	if err != nil {
		return nil, err
	}
	x := &vastoMasterRegisterStoreClient{stream}
	return x, nil
}

type VastoMaster_RegisterStoreClient interface {
	Send(*StoreHeartbeat) error
	Recv() (*StoreMessage, error)
	grpc.ClientStream
}

type vastoMasterRegisterStoreClient struct {
	grpc.ClientStream
}

func (x *vastoMasterRegisterStoreClient) Send(m *StoreHeartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vastoMasterRegisterStoreClient) Recv() (*StoreMessage, error) {
	m := new(StoreMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vastoMasterClient) RegisterClient(ctx context.Context, opts ...grpc.CallOption) (VastoMaster_RegisterClientClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VastoMaster_serviceDesc.Streams[1], c.cc, "/pb.VastoMaster/RegisterClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &vastoMasterRegisterClientClient{stream}
	return x, nil
}

type VastoMaster_RegisterClientClient interface {
	Send(*ClientHeartbeat) error
	Recv() (*ClientMessage, error)
	grpc.ClientStream
}

type vastoMasterRegisterClientClient struct {
	grpc.ClientStream
}

func (x *vastoMasterRegisterClientClient) Send(m *ClientHeartbeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vastoMasterRegisterClientClient) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vastoMasterClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := grpc.Invoke(ctx, "/pb.VastoMaster/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoMasterClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error) {
	out := new(CreateClusterResponse)
	err := grpc.Invoke(ctx, "/pb.VastoMaster/CreateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoMasterClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error) {
	out := new(DeleteClusterResponse)
	err := grpc.Invoke(ctx, "/pb.VastoMaster/DeleteCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoMasterClient) ResizeCluster(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (*ResizeResponse, error) {
	out := new(ResizeResponse)
	err := grpc.Invoke(ctx, "/pb.VastoMaster/ResizeCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoMasterClient) ReplaceNode(ctx context.Context, in *ReplaceNodeRequest, opts ...grpc.CallOption) (*ReplaceNodeResponse, error) {
	out := new(ReplaceNodeResponse)
	err := grpc.Invoke(ctx, "/pb.VastoMaster/ReplaceNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VastoMaster service

type VastoMasterServer interface {
	RegisterStore(VastoMaster_RegisterStoreServer) error
	RegisterClient(VastoMaster_RegisterClientServer) error
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	ResizeCluster(context.Context, *ResizeRequest) (*ResizeResponse, error)
	ReplaceNode(context.Context, *ReplaceNodeRequest) (*ReplaceNodeResponse, error)
}

func RegisterVastoMasterServer(s *grpc.Server, srv VastoMasterServer) {
	s.RegisterService(&_VastoMaster_serviceDesc, srv)
}

func _VastoMaster_RegisterStore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VastoMasterServer).RegisterStore(&vastoMasterRegisterStoreServer{stream})
}

type VastoMaster_RegisterStoreServer interface {
	Send(*StoreMessage) error
	Recv() (*StoreHeartbeat, error)
	grpc.ServerStream
}

type vastoMasterRegisterStoreServer struct {
	grpc.ServerStream
}

func (x *vastoMasterRegisterStoreServer) Send(m *StoreMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vastoMasterRegisterStoreServer) Recv() (*StoreHeartbeat, error) {
	m := new(StoreHeartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VastoMaster_RegisterClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VastoMasterServer).RegisterClient(&vastoMasterRegisterClientServer{stream})
}

type VastoMaster_RegisterClientServer interface {
	Send(*ClientMessage) error
	Recv() (*ClientHeartbeat, error)
	grpc.ServerStream
}

type vastoMasterRegisterClientServer struct {
	grpc.ServerStream
}

func (x *vastoMasterRegisterClientServer) Send(m *ClientMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vastoMasterRegisterClientServer) Recv() (*ClientHeartbeat, error) {
	m := new(ClientHeartbeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VastoMaster_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoMasterServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoMaster/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoMasterServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoMaster_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoMasterServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoMaster/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoMasterServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoMaster_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoMasterServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoMaster/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoMasterServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoMaster_ResizeCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoMasterServer).ResizeCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoMaster/ResizeCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoMasterServer).ResizeCluster(ctx, req.(*ResizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoMaster_ReplaceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoMasterServer).ReplaceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoMaster/ReplaceNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoMasterServer).ReplaceNode(ctx, req.(*ReplaceNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VastoMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VastoMaster",
	HandlerType: (*VastoMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _VastoMaster_Describe_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _VastoMaster_CreateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _VastoMaster_DeleteCluster_Handler,
		},
		{
			MethodName: "ResizeCluster",
			Handler:    _VastoMaster_ResizeCluster_Handler,
		},
		{
			MethodName: "ReplaceNode",
			Handler:    _VastoMaster_ReplaceNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterStore",
			Handler:       _VastoMaster_RegisterStore_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RegisterClient",
			Handler:       _VastoMaster_RegisterClient_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vasto.proto",
}

// Client API for VastoStore service

type VastoStoreClient interface {
	BootstrapCopy(ctx context.Context, in *BootstrapCopyRequest, opts ...grpc.CallOption) (VastoStore_BootstrapCopyClient, error)
	TailBinlog(ctx context.Context, in *PullUpdateRequest, opts ...grpc.CallOption) (VastoStore_TailBinlogClient, error)
	CheckBinlog(ctx context.Context, in *CheckBinlogRequest, opts ...grpc.CallOption) (*CheckBinlogResponse, error)
	CreateShard(ctx context.Context, in *CreateShardRequest, opts ...grpc.CallOption) (*CreateShardResponse, error)
	DeleteKeyspace(ctx context.Context, in *DeleteKeyspaceRequest, opts ...grpc.CallOption) (*DeleteKeyspaceResponse, error)
	ReplicateNodePrepare(ctx context.Context, in *ReplicateNodePrepareRequest, opts ...grpc.CallOption) (*ReplicateNodePrepareResponse, error)
	ReplicateNodeCommit(ctx context.Context, in *ReplicateNodeCommitRequest, opts ...grpc.CallOption) (*ReplicateNodeCommitResponse, error)
	ReplicateNodeCleanup(ctx context.Context, in *ReplicateNodeCleanupRequest, opts ...grpc.CallOption) (*ReplicateNodeCleanupResponse, error)
	ShrinkClusterPrepare(ctx context.Context, in *ShrinkClusterPrepareRequest, opts ...grpc.CallOption) (*ShrinkClusterPrepareResponse, error)
	ShrinkClusterCommit(ctx context.Context, in *ShrinkClusterCommitRequest, opts ...grpc.CallOption) (*ShrinkClusterCommitResponse, error)
	ShrinkClusterCleanup(ctx context.Context, in *ShrinkClusterCleanupRequest, opts ...grpc.CallOption) (*ShrinkClusterCleanupResponse, error)
}

type vastoStoreClient struct {
	cc *grpc.ClientConn
}

func NewVastoStoreClient(cc *grpc.ClientConn) VastoStoreClient {
	return &vastoStoreClient{cc}
}

func (c *vastoStoreClient) BootstrapCopy(ctx context.Context, in *BootstrapCopyRequest, opts ...grpc.CallOption) (VastoStore_BootstrapCopyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VastoStore_serviceDesc.Streams[0], c.cc, "/pb.VastoStore/BootstrapCopy", opts...)
	if err != nil {
		return nil, err
	}
	x := &vastoStoreBootstrapCopyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VastoStore_BootstrapCopyClient interface {
	Recv() (*BootstrapCopyResponse, error)
	grpc.ClientStream
}

type vastoStoreBootstrapCopyClient struct {
	grpc.ClientStream
}

func (x *vastoStoreBootstrapCopyClient) Recv() (*BootstrapCopyResponse, error) {
	m := new(BootstrapCopyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vastoStoreClient) TailBinlog(ctx context.Context, in *PullUpdateRequest, opts ...grpc.CallOption) (VastoStore_TailBinlogClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_VastoStore_serviceDesc.Streams[1], c.cc, "/pb.VastoStore/TailBinlog", opts...)
	if err != nil {
		return nil, err
	}
	x := &vastoStoreTailBinlogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VastoStore_TailBinlogClient interface {
	Recv() (*PullUpdateResponse, error)
	grpc.ClientStream
}

type vastoStoreTailBinlogClient struct {
	grpc.ClientStream
}

func (x *vastoStoreTailBinlogClient) Recv() (*PullUpdateResponse, error) {
	m := new(PullUpdateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vastoStoreClient) CheckBinlog(ctx context.Context, in *CheckBinlogRequest, opts ...grpc.CallOption) (*CheckBinlogResponse, error) {
	out := new(CheckBinlogResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/CheckBinlog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoStoreClient) CreateShard(ctx context.Context, in *CreateShardRequest, opts ...grpc.CallOption) (*CreateShardResponse, error) {
	out := new(CreateShardResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/CreateShard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoStoreClient) DeleteKeyspace(ctx context.Context, in *DeleteKeyspaceRequest, opts ...grpc.CallOption) (*DeleteKeyspaceResponse, error) {
	out := new(DeleteKeyspaceResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/DeleteKeyspace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoStoreClient) ReplicateNodePrepare(ctx context.Context, in *ReplicateNodePrepareRequest, opts ...grpc.CallOption) (*ReplicateNodePrepareResponse, error) {
	out := new(ReplicateNodePrepareResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/ReplicateNodePrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoStoreClient) ReplicateNodeCommit(ctx context.Context, in *ReplicateNodeCommitRequest, opts ...grpc.CallOption) (*ReplicateNodeCommitResponse, error) {
	out := new(ReplicateNodeCommitResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/ReplicateNodeCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoStoreClient) ReplicateNodeCleanup(ctx context.Context, in *ReplicateNodeCleanupRequest, opts ...grpc.CallOption) (*ReplicateNodeCleanupResponse, error) {
	out := new(ReplicateNodeCleanupResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/ReplicateNodeCleanup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoStoreClient) ShrinkClusterPrepare(ctx context.Context, in *ShrinkClusterPrepareRequest, opts ...grpc.CallOption) (*ShrinkClusterPrepareResponse, error) {
	out := new(ShrinkClusterPrepareResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/ShrinkClusterPrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoStoreClient) ShrinkClusterCommit(ctx context.Context, in *ShrinkClusterCommitRequest, opts ...grpc.CallOption) (*ShrinkClusterCommitResponse, error) {
	out := new(ShrinkClusterCommitResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/ShrinkClusterCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vastoStoreClient) ShrinkClusterCleanup(ctx context.Context, in *ShrinkClusterCleanupRequest, opts ...grpc.CallOption) (*ShrinkClusterCleanupResponse, error) {
	out := new(ShrinkClusterCleanupResponse)
	err := grpc.Invoke(ctx, "/pb.VastoStore/ShrinkClusterCleanup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VastoStore service

type VastoStoreServer interface {
	BootstrapCopy(*BootstrapCopyRequest, VastoStore_BootstrapCopyServer) error
	TailBinlog(*PullUpdateRequest, VastoStore_TailBinlogServer) error
	CheckBinlog(context.Context, *CheckBinlogRequest) (*CheckBinlogResponse, error)
	CreateShard(context.Context, *CreateShardRequest) (*CreateShardResponse, error)
	DeleteKeyspace(context.Context, *DeleteKeyspaceRequest) (*DeleteKeyspaceResponse, error)
	ReplicateNodePrepare(context.Context, *ReplicateNodePrepareRequest) (*ReplicateNodePrepareResponse, error)
	ReplicateNodeCommit(context.Context, *ReplicateNodeCommitRequest) (*ReplicateNodeCommitResponse, error)
	ReplicateNodeCleanup(context.Context, *ReplicateNodeCleanupRequest) (*ReplicateNodeCleanupResponse, error)
	ShrinkClusterPrepare(context.Context, *ShrinkClusterPrepareRequest) (*ShrinkClusterPrepareResponse, error)
	ShrinkClusterCommit(context.Context, *ShrinkClusterCommitRequest) (*ShrinkClusterCommitResponse, error)
	ShrinkClusterCleanup(context.Context, *ShrinkClusterCleanupRequest) (*ShrinkClusterCleanupResponse, error)
}

func RegisterVastoStoreServer(s *grpc.Server, srv VastoStoreServer) {
	s.RegisterService(&_VastoStore_serviceDesc, srv)
}

func _VastoStore_BootstrapCopy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BootstrapCopyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VastoStoreServer).BootstrapCopy(m, &vastoStoreBootstrapCopyServer{stream})
}

type VastoStore_BootstrapCopyServer interface {
	Send(*BootstrapCopyResponse) error
	grpc.ServerStream
}

type vastoStoreBootstrapCopyServer struct {
	grpc.ServerStream
}

func (x *vastoStoreBootstrapCopyServer) Send(m *BootstrapCopyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VastoStore_TailBinlog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullUpdateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VastoStoreServer).TailBinlog(m, &vastoStoreTailBinlogServer{stream})
}

type VastoStore_TailBinlogServer interface {
	Send(*PullUpdateResponse) error
	grpc.ServerStream
}

type vastoStoreTailBinlogServer struct {
	grpc.ServerStream
}

func (x *vastoStoreTailBinlogServer) Send(m *PullUpdateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VastoStore_CheckBinlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBinlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).CheckBinlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/CheckBinlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).CheckBinlog(ctx, req.(*CheckBinlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoStore_CreateShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).CreateShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/CreateShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).CreateShard(ctx, req.(*CreateShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoStore_DeleteKeyspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).DeleteKeyspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/DeleteKeyspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).DeleteKeyspace(ctx, req.(*DeleteKeyspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoStore_ReplicateNodePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateNodePrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).ReplicateNodePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/ReplicateNodePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).ReplicateNodePrepare(ctx, req.(*ReplicateNodePrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoStore_ReplicateNodeCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateNodeCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).ReplicateNodeCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/ReplicateNodeCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).ReplicateNodeCommit(ctx, req.(*ReplicateNodeCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoStore_ReplicateNodeCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateNodeCleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).ReplicateNodeCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/ReplicateNodeCleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).ReplicateNodeCleanup(ctx, req.(*ReplicateNodeCleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoStore_ShrinkClusterPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShrinkClusterPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).ShrinkClusterPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/ShrinkClusterPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).ShrinkClusterPrepare(ctx, req.(*ShrinkClusterPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoStore_ShrinkClusterCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShrinkClusterCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).ShrinkClusterCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/ShrinkClusterCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).ShrinkClusterCommit(ctx, req.(*ShrinkClusterCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VastoStore_ShrinkClusterCleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShrinkClusterCleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VastoStoreServer).ShrinkClusterCleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.VastoStore/ShrinkClusterCleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VastoStoreServer).ShrinkClusterCleanup(ctx, req.(*ShrinkClusterCleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VastoStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.VastoStore",
	HandlerType: (*VastoStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckBinlog",
			Handler:    _VastoStore_CheckBinlog_Handler,
		},
		{
			MethodName: "CreateShard",
			Handler:    _VastoStore_CreateShard_Handler,
		},
		{
			MethodName: "DeleteKeyspace",
			Handler:    _VastoStore_DeleteKeyspace_Handler,
		},
		{
			MethodName: "ReplicateNodePrepare",
			Handler:    _VastoStore_ReplicateNodePrepare_Handler,
		},
		{
			MethodName: "ReplicateNodeCommit",
			Handler:    _VastoStore_ReplicateNodeCommit_Handler,
		},
		{
			MethodName: "ReplicateNodeCleanup",
			Handler:    _VastoStore_ReplicateNodeCleanup_Handler,
		},
		{
			MethodName: "ShrinkClusterPrepare",
			Handler:    _VastoStore_ShrinkClusterPrepare_Handler,
		},
		{
			MethodName: "ShrinkClusterCommit",
			Handler:    _VastoStore_ShrinkClusterCommit_Handler,
		},
		{
			MethodName: "ShrinkClusterCleanup",
			Handler:    _VastoStore_ShrinkClusterCleanup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BootstrapCopy",
			Handler:       _VastoStore_BootstrapCopy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TailBinlog",
			Handler:       _VastoStore_TailBinlog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vasto.proto",
}

func init() { proto.RegisterFile("vasto.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2726 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x3a, 0x4b, 0x6f, 0x24, 0x57,
	0xd5, 0xae, 0x6e, 0xbb, 0x1f, 0xa7, 0xdc, 0xdd, 0xf6, 0xb5, 0xc7, 0x71, 0x6a, 0xbe, 0x2f, 0xf6,
	0x54, 0x98, 0xe0, 0xc9, 0x24, 0xcd, 0xc8, 0x01, 0xc5, 0x4c, 0x24, 0x92, 0xf1, 0x63, 0x32, 0x4e,
	0x32, 0x63, 0xab, 0xda, 0x89, 0x88, 0x40, 0x2a, 0xca, 0x55, 0xd7, 0xed, 0xc2, 0xd5, 0x55, 0x4d,
	0xdd, 0xdb, 0x33, 0xd3, 0xac, 0x50, 0x36, 0x08, 0x81, 0xd8, 0x92, 0x3d, 0x1b, 0xf6, 0xb0, 0x61,
	0xc1, 0x0f, 0x00, 0x09, 0xd8, 0xf2, 0x0b, 0x90, 0x80, 0x25, 0xfc, 0x00, 0x74, 0x5f, 0x5d, 0x8f,
	0xae, 0x6a, 0xdb, 0x9a, 0x09, 0xbb, 0xbe, 0xe7, 0x75, 0xcf, 0xeb, 0x9e, 0x73, 0xef, 0xa9, 0x06,
	0xfd, 0xa9, 0x43, 0x68, 0xd4, 0x1d, 0xc6, 0x11, 0x8d, 0x50, 0x65, 0x78, 0x6a, 0x12, 0x68, 0xef,
	0x3a, 0x81, 0x13, 0xba, 0xd8, 0xc2, 0x3f, 0x1a, 0x61, 0x42, 0xd1, 0x06, 0xe8, 0x9e, 0x43, 0x1d,
	0xdb, 0xc5, 0x21, 0xc5, 0xf1, 0xba, 0xb6, 0xa9, 0x6d, 0x35, 0x2d, 0x60, 0xa0, 0x3d, 0x0e, 0x61,
	0x04, 0x84, 0x46, 0x31, 0xb6, 0xfb, 0x71, 0x34, 0x1a, 0xae, 0x57, 0x04, 0x01, 0x07, 0x7d, 0xc8,
	0x20, 0x09, 0x81, 0x1b, 0x8d, 0x42, 0xba, 0x5e, 0xdd, 0xd4, 0xb6, 0x5a, 0x92, 0x60, 0x8f, 0x41,
	0xcc, 0x67, 0xd0, 0xee, 0xb1, 0xd5, 0x23, 0xec, 0xc4, 0xf4, 0x14, 0x3b, 0x14, 0xed, 0x40, 0x5b,
	0xb0, 0xc4, 0x98, 0x44, 0xa3, 0xd8, 0xc5, 0x7c, 0x5f, 0x7d, 0x7b, 0xb9, 0x3b, 0x3c, 0xed, 0x72,
	0x5a, 0x4b, 0x22, 0xac, 0x16, 0x49, 0x2f, 0xd1, 0x5d, 0x68, 0xf6, 0xce, 0x9d, 0xd8, 0x3b, 0x0c,
	0xcf, 0x22, 0xae, 0x8b, 0xbe, 0xdd, 0xe2, 0x4c, 0x0a, 0x68, 0x25, 0x78, 0xb3, 0x0d, 0x8b, 0x5c,
	0xd8, 0x63, 0x4c, 0x88, 0xd3, 0xc7, 0xe6, 0xdf, 0x34, 0xe8, 0xec, 0x05, 0x3e, 0x0e, 0x69, 0xa2,
	0xca, 0xa5, 0xf6, 0x1f, 0x41, 0xdb, 0x0d, 0x46, 0x84, 0xe2, 0xd8, 0x3e, 0x8b, 0x82, 0x20, 0x7a,
	0x26, 0xb7, 0xdd, 0x62, 0xdb, 0xe6, 0xa4, 0x75, 0xf7, 0x04, 0xe5, 0x43, 0x4e, 0x28, 0xb7, 0xb5,
	0x5a, 0x6e, 0x1a, 0x6a, 0xf4, 0x60, 0xb5, 0x88, 0x0c, 0x19, 0xd0, 0xb8, 0xc0, 0x63, 0x32, 0x74,
	0xa4, 0x3b, 0x9a, 0xd6, 0x64, 0xcd, 0xb4, 0xf4, 0x89, 0x3d, 0x0a, 0x53, 0x1a, 0x34, 0x2c, 0xf0,
	0xc9, 0xa7, 0x12, 0x62, 0xfe, 0xb1, 0x0a, 0x2d, 0xa1, 0x8c, 0x12, 0x77, 0x1b, 0xea, 0x72, 0x5f,
	0xe9, 0x5c, 0x5d, 0x28, 0xcc, 0x41, 0x96, 0xc2, 0xa1, 0xf7, 0xa1, 0x3e, 0x1a, 0x7a, 0x0e, 0xc5,
	0x44, 0xda, 0x75, 0x3b, 0xb1, 0x4b, 0x8a, 0xca, 0x46, 0xe4, 0x53, 0x4e, 0x6d, 0x29, 0x2e, 0x74,
	0x0f, 0x6a, 0x31, 0x26, 0xfe, 0x8f, 0x31, 0x8f, 0xbc, 0xbe, 0xbd, 0x3e, 0xcd, 0x6f, 0x71, 0xbc,
	0x25, 0xe9, 0x8c, 0x2f, 0x35, 0x58, 0x29, 0x10, 0x89, 0x6e, 0xc3, 0x42, 0x18, 0x79, 0x98, 0xac,
	0x6b, 0x9b, 0xd5, 0x2d, 0x7d, 0xbb, 0x93, 0xd2, 0xf7, 0x49, 0xe4, 0x61, 0x4b, 0x60, 0xd1, 0x4d,
	0x68, 0xfa, 0xc4, 0xf6, 0x70, 0x80, 0x29, 0x96, 0x9e, 0x68, 0xf8, 0x64, 0x9f, 0xaf, 0x33, 0x4e,
	0xac, 0xe6, 0x9c, 0x78, 0x0b, 0x16, 0x7d, 0x62, 0x0f, 0xe3, 0x68, 0x10, 0x51, 0x3f, 0x0a, 0xd7,
	0xe7, 0x39, 0xaf, 0xee, 0x93, 0x63, 0x05, 0x32, 0xbe, 0xd0, 0xa0, 0x26, 0xb4, 0x45, 0xf7, 0x60,
	0xd5, 0x1d, 0xc5, 0x31, 0x0e, 0xa9, 0xad, 0xe2, 0xcf, 0xad, 0xd4, 0x78, 0x7e, 0x23, 0x89, 0x93,
	0xfa, 0xf5, 0x18, 0xc7, 0x9b, 0xb0, 0x1c, 0xe2, 0xe7, 0x39, 0xf2, 0x0a, 0x27, 0xef, 0x30, 0x44,
	0x9a, 0x76, 0x86, 0x9e, 0xe6, 0x17, 0x15, 0xa8, 0x4b, 0xda, 0xcb, 0x92, 0x22, 0x9d, 0xba, 0x95,
	0xa9, 0xd4, 0x9d, 0x38, 0xb4, 0x3a, 0xd3, 0xa1, 0xdb, 0x70, 0x03, 0x3f, 0x1f, 0x62, 0x97, 0x62,
	0x2f, 0xab, 0xfb, 0x3c, 0xd7, 0x7d, 0x45, 0x21, 0xd3, 0xfa, 0x97, 0x79, 0x67, 0xa1, 0xd4, 0x3b,
	0x6f, 0x03, 0x8a, 0xf1, 0x30, 0xf0, 0x5d, 0x87, 0x79, 0xda, 0x3e, 0x73, 0x5c, 0x1a, 0xc5, 0xeb,
	0x35, 0x4e, 0xbf, 0x9c, 0xc2, 0x3c, 0xe4, 0x08, 0x73, 0x04, 0x7a, 0x4a, 0xd5, 0x17, 0xa8, 0x18,
	0x6f, 0x01, 0x10, 0x56, 0x11, 0x6c, 0xbf, 0xbc, 0x64, 0x90, 0x49, 0xc9, 0xf8, 0x97, 0x06, 0xad,
	0x8c, 0xb8, 0xcb, 0x0b, 0xc4, 0x3a, 0xd4, 0x43, 0x4c, 0x9f, 0x45, 0xf1, 0x85, 0x0c, 0x81, 0x5a,
	0x32, 0x8c, 0xe3, 0x79, 0x31, 0x26, 0x44, 0xc6, 0x58, 0x2d, 0xd1, 0xeb, 0xd0, 0x72, 0xbc, 0x81,
	0x1f, 0xda, 0x0a, 0x3f, 0xcf, 0xf1, 0x8b, 0x1c, 0xf8, 0x40, 0x12, 0x21, 0x98, 0xa7, 0x4e, 0x9f,
	0xac, 0xd7, 0x37, 0xab, 0x5b, 0x4d, 0x8b, 0xff, 0x46, 0x9b, 0xb0, 0xe8, 0xf9, 0xe4, 0x82, 0x3b,
	0xdb, 0xee, 0x9f, 0xae, 0x37, 0x44, 0xb5, 0x65, 0x30, 0xe6, 0xe5, 0x0f, 0x4f, 0x59, 0x16, 0x3a,
	0x41, 0x10, 0xb9, 0x0e, 0x0b, 0xa7, 0x22, 0x6b, 0x8a, 0x2c, 0x9c, 0x20, 0x04, 0xad, 0xf9, 0xb3,
	0x0a, 0xac, 0x7e, 0x12, 0xb9, 0x4e, 0xc0, 0x7d, 0x41, 0x0e, 0x43, 0x95, 0x76, 0x6d, 0xa8, 0xf8,
	0x9e, 0x4c, 0xf5, 0x8a, 0xef, 0xa1, 0x3d, 0x10, 0x3e, 0xb2, 0x07, 0x0e, 0x6b, 0x01, 0x2c, 0x9b,
	0xde, 0x60, 0x3e, 0x2c, 0x62, 0x16, 0x8e, 0x7d, 0xec, 0x0c, 0x0f, 0x42, 0x1a, 0x8f, 0xad, 0x06,
	0x91, 0x4b, 0x76, 0xfe, 0x32, 0xb9, 0x22, 0x3a, 0x85, 0xee, 0x5e, 0x9a, 0x24, 0xf3, 0x25, 0x49,
	0x62, 0x7c, 0x04, 0xad, 0xcc, 0x66, 0x68, 0x09, 0xaa, 0x17, 0x78, 0x2c, 0x15, 0x67, 0x3f, 0xd1,
	0xeb, 0xb0, 0xf0, 0xd4, 0x09, 0x46, 0xb8, 0x38, 0xf2, 0x02, 0x77, 0xbf, 0xb2, 0xa3, 0x99, 0xff,
	0xae, 0xa4, 0x5a, 0x0b, 0x0b, 0x90, 0x3a, 0x67, 0x76, 0xe8, 0x0c, 0xd4, 0xe1, 0x5b, 0x54, 0xc0,
	0x27, 0xce, 0x00, 0xa3, 0x57, 0xa0, 0xce, 0x4e, 0x90, 0xed, 0x7b, 0xf2, 0x98, 0xd7, 0xd8, 0xf2,
	0xd0, 0x43, 0xaf, 0x42, 0x43, 0xe6, 0x9c, 0x27, 0xad, 0xac, 0x8b, 0x14, 0xf3, 0xa6, 0x9c, 0x30,
	0x7f, 0x55, 0x27, 0x2c, 0x94, 0x38, 0x01, 0xbd, 0x05, 0x35, 0x42, 0x1d, 0x3a, 0x22, 0xfc, 0x30,
	0xb5, 0xb7, 0x57, 0x33, 0x26, 0x76, 0x7b, 0x1c, 0x67, 0x49, 0x1a, 0x59, 0x04, 0x5d, 0x27, 0xf4,
	0x7c, 0x56, 0x74, 0xd7, 0xeb, 0xaa, 0x08, 0xee, 0x29, 0x10, 0xea, 0xc2, 0x0a, 0xab, 0x93, 0x38,
	0x1e, 0x38, 0x21, 0x3b, 0xe0, 0xb2, 0xd4, 0x36, 0x38, 0xe5, 0xb2, 0x4f, 0x8e, 0x15, 0x46, 0xd4,
	0x5c, 0xf3, 0x3e, 0xd4, 0xc4, 0x26, 0xa8, 0x09, 0x0b, 0x07, 0x8f, 0x8f, 0x4f, 0x3e, 0x5f, 0x9a,
	0x43, 0x2d, 0x68, 0xee, 0x1e, 0x1d, 0x9d, 0xf4, 0x4e, 0xac, 0x07, 0xc7, 0x4b, 0x1a, 0xc3, 0x58,
	0x07, 0x0f, 0xf6, 0x3f, 0x5f, 0xaa, 0x20, 0x1d, 0xea, 0xfb, 0x07, 0x9f, 0x1c, 0x9c, 0x1c, 0xec,
	0x2f, 0x55, 0xcd, 0x3a, 0x2c, 0x1c, 0x0c, 0x86, 0x74, 0x6c, 0x1e, 0x41, 0x43, 0x5e, 0x49, 0xc8,
	0xcc, 0xa2, 0xf7, 0x75, 0x68, 0xc4, 0x92, 0x4e, 0x26, 0x22, 0xef, 0x6b, 0x92, 0xd7, 0x9a, 0x20,
	0xcd, 0x77, 0xa1, 0x69, 0x61, 0x32, 0x8c, 0x42, 0x82, 0x09, 0x7a, 0x13, 0x9a, 0xb1, 0x5a, 0xc8,
	0xf6, 0xb2, 0x28, 0xd8, 0x04, 0xd0, 0x4a, 0xd0, 0xe6, 0xef, 0x34, 0xa8, 0xab, 0xdb, 0xd1, 0x26,
	0x54, 0x87, 0x23, 0x2a, 0x6b, 0x4d, 0x9b, 0x71, 0x1c, 0x8f, 0xa8, 0xda, 0x8b, 0xa1, 0x18, 0x45,
	0x1f, 0x53, 0x99, 0x5d, 0x9c, 0xe2, 0x43, 0x9c, 0x50, 0xf4, 0x31, 0x45, 0xf7, 0xa1, 0xd5, 0xc7,
	0xd4, 0x3e, 0x1d, 0xdb, 0xc3, 0x18, 0x9f, 0xf9, 0xcf, 0x65, 0x9f, 0x5c, 0x93, 0xb4, 0xbb, 0xe3,
	0x63, 0x0e, 0x56, 0x3c, 0x7a, 0x3f, 0x81, 0xa1, 0x3b, 0x50, 0x93, 0xde, 0x9f, 0x4f, 0xca, 0x9d,
	0x70, 0xbb, 0xa2, 0x97, 0x04, 0xe6, 0xaf, 0x34, 0x80, 0x44, 0x39, 0x56, 0x7b, 0x64, 0xaa, 0xc8,
	0xd3, 0xa0, 0x96, 0xe8, 0x36, 0xb4, 0x87, 0x4e, 0x4c, 0x7d, 0x9e, 0x5c, 0xe7, 0x0e, 0x39, 0xe7,
	0xca, 0xcf, 0x5b, 0xad, 0x09, 0xf4, 0x91, 0x43, 0xce, 0xd1, 0x1d, 0x68, 0x5e, 0xe0, 0xb1, 0x2d,
	0x0e, 0x8f, 0x50, 0x99, 0xbb, 0xec, 0x63, 0x3c, 0xfe, 0x8c, 0xc1, 0x78, 0x4c, 0xf8, 0x2f, 0xf4,
	0xff, 0x00, 0x94, 0x06, 0x36, 0xc1, 0x6e, 0x14, 0x7a, 0x32, 0xa3, 0x9b, 0x94, 0x06, 0x3d, 0x0e,
	0x30, 0xbf, 0x05, 0x3a, 0x57, 0x4c, 0x38, 0x98, 0xd5, 0x96, 0xe8, 0x82, 0x2b, 0xd5, 0xb0, 0x2a,
	0xd1, 0x05, 0x5a, 0x9b, 0xe4, 0xaf, 0x28, 0x9f, 0x72, 0x65, 0x9e, 0x42, 0x2b, 0x63, 0xe9, 0x8b,
	0x9b, 0x24, 0xab, 0x03, 0x33, 0x66, 0x91, 0x57, 0x07, 0x73, 0x07, 0xda, 0x6a, 0x8f, 0x6b, 0x6a,
	0xb7, 0x03, 0x90, 0x04, 0x7a, 0x86, 0x6a, 0x72, 0xcf, 0x4a, 0xb2, 0xe7, 0x0f, 0x40, 0xe7, 0x9c,
	0xd7, 0xdb, 0xf0, 0x1a, 0xf1, 0x30, 0x7f, 0xa2, 0x01, 0x9a, 0xce, 0xac, 0x19, 0x4a, 0xae, 0x41,
	0x4d, 0xe6, 0xa6, 0xd0, 0x53, 0xae, 0xd0, 0x2a, 0x2c, 0x04, 0xfe, 0xc0, 0x57, 0x97, 0x7a, 0xb1,
	0x40, 0x26, 0xb4, 0x02, 0x87, 0x50, 0x9b, 0x60, 0x1c, 0xda, 0xcc, 0xb8, 0x79, 0xce, 0xa4, 0x33,
	0x60, 0x0f, 0xe3, 0xf0, 0x63, 0x3c, 0x36, 0x7f, 0x08, 0x2b, 0x19, 0x0d, 0xae, 0x69, 0xec, 0x5d,
	0x80, 0x89, 0xb1, 0xea, 0xfa, 0x92, 0xb5, 0xb6, 0xa9, 0xac, 0x25, 0xe6, 0xef, 0x35, 0x56, 0x3b,
	0xe4, 0x0e, 0xb7, 0xd2, 0x27, 0xb6, 0x33, 0x39, 0xb1, 0xf2, 0x98, 0xf3, 0x23, 0x7b, 0x2b, 0x7d,
	0x64, 0x3b, 0x93, 0x23, 0xab, 0x48, 0xd8, 0x99, 0x7d, 0xaf, 0xf8, 0xcc, 0xbe, 0x32, 0x75, 0x66,
	0x25, 0x53, 0xe6, 0xd0, 0xbe, 0x99, 0x3b, 0xb4, 0x28, 0x7d, 0x68, 0x25, 0x83, 0x3a, 0xb5, 0xdb,
	0xd0, 0x50, 0x26, 0xa5, 0x9b, 0x97, 0x48, 0x15, 0xe6, 0xff, 0xa4, 0x79, 0x2d, 0xca, 0x6e, 0x65,
	0xf6, 0xa0, 0xbd, 0x17, 0x0d, 0xc7, 0xfb, 0x51, 0xc8, 0x5f, 0x36, 0x7d, 0xcc, 0xe8, 0x78, 0x7f,
	0xe1, 0xbc, 0x0b, 0x96, 0x58, 0xa0, 0xbb, 0x80, 0xdc, 0x68, 0x38, 0xb6, 0x09, 0x75, 0x62, 0x6a,
	0x53, 0x7f, 0x80, 0xed, 0x50, 0x38, 0xba, 0x6a, 0x75, 0x18, 0xa6, 0xc7, 0x10, 0x27, 0xfe, 0x00,
	0x3f, 0x21, 0xe6, 0x1f, 0x34, 0x58, 0xdd, 0x8d, 0x22, 0x4a, 0x68, 0xec, 0x0c, 0x99, 0x78, 0x95,
	0x35, 0xb3, 0x8a, 0x71, 0xba, 0xcf, 0x55, 0xb2, 0x7d, 0xee, 0x0d, 0xe8, 0x50, 0x27, 0x66, 0x4e,
	0xcc, 0x75, 0xc2, 0x96, 0x00, 0xf7, 0x24, 0x5d, 0x17, 0x56, 0x24, 0x5d, 0x41, 0x5b, 0x5c, 0x16,
	0xa8, 0xf4, 0x35, 0x72, 0x0d, 0x6a, 0x51, 0xec, 0xf7, 0xfd, 0x90, 0x37, 0xc4, 0xa6, 0x25, 0x57,
	0xe6, 0x3f, 0x35, 0xb8, 0x91, 0xd3, 0x5f, 0x66, 0x44, 0x36, 0x97, 0xb4, 0x99, 0xb9, 0x84, 0xbe,
	0x0f, 0xe8, 0xd4, 0x0f, 0x83, 0xa8, 0x7f, 0xe2, 0xf8, 0xc1, 0x71, 0x1c, 0xf5, 0xf9, 0xed, 0x4c,
	0xa4, 0xca, 0x5b, 0x8c, 0xa9, 0x70, 0x8f, 0xee, 0xee, 0x14, 0x8f, 0x55, 0x20, 0xc7, 0x78, 0x08,
	0x68, 0x9a, 0x92, 0x9d, 0x4b, 0x82, 0xfb, 0x03, 0x1c, 0x52, 0x75, 0x2e, 0xe5, 0x92, 0x1b, 0x7b,
	0x76, 0x46, 0x64, 0xb2, 0xce, 0x5b, 0x72, 0xc5, 0x5e, 0x08, 0xcb, 0xc7, 0xa3, 0x20, 0x90, 0x6f,
	0xb1, 0x17, 0x8b, 0x54, 0x6a, 0xfb, 0x6a, 0xd9, 0xf6, 0xf3, 0xe9, 0xed, 0x93, 0xb2, 0xb0, 0x90,
	0x2e, 0x0b, 0x05, 0x11, 0xaf, 0x5d, 0x23, 0xe2, 0xf5, 0xcb, 0x23, 0xde, 0xc8, 0x44, 0xfc, 0xd7,
	0x1a, 0xa0, 0xb4, 0x13, 0x26, 0x05, 0x60, 0x91, 0xbf, 0xc2, 0xb2, 0x2e, 0xd5, 0x19, 0xac, 0x27,
	0xed, 0xda, 0x00, 0xbe, 0xb4, 0x33, 0xbe, 0x05, 0x06, 0x3a, 0x12, 0x06, 0xde, 0x81, 0x3a, 0x0e,
	0x69, 0xec, 0x67, 0x9f, 0x4e, 0x62, 0x23, 0x71, 0xab, 0x55, 0x78, 0xf4, 0x1a, 0xe8, 0xd1, 0x88,
	0x89, 0xb2, 0xc9, 0x38, 0x74, 0xe5, 0x9b, 0xb2, 0x19, 0x8d, 0xe8, 0xd1, 0x59, 0x6f, 0x1c, 0xba,
	0xe6, 0x9f, 0x35, 0xd0, 0x53, 0x8c, 0x05, 0xad, 0xaa, 0x5a, 0xd4, 0xaa, 0x4c, 0x68, 0x89, 0x07,
	0xb6, 0x67, 0x3b, 0x94, 0x1d, 0x5b, 0x11, 0x01, 0x5d, 0x02, 0x1f, 0xd0, 0x27, 0x24, 0xd7, 0x76,
	0x17, 0x72, 0x6d, 0x97, 0x95, 0x13, 0x37, 0x76, 0x65, 0x0c, 0xd8, 0x4f, 0x96, 0x20, 0xea, 0xa1,
	0x2c, 0xef, 0x7d, 0xc9, 0xc3, 0x59, 0x16, 0x9f, 0x46, 0x41, 0xf1, 0x69, 0xa6, 0x8b, 0xcf, 0x21,
	0xa0, 0xbd, 0x73, 0xec, 0x5e, 0x88, 0x3c, 0xbe, 0x4a, 0xea, 0x95, 0xdd, 0x92, 0x59, 0x9b, 0x5a,
	0xc9, 0xc8, 0x92, 0x11, 0x4c, 0x31, 0x68, 0x99, 0x6b, 0xf5, 0x1d, 0x58, 0xc2, 0x4e, 0x1c, 0xf8,
	0x98, 0x24, 0xe1, 0x95, 0xef, 0x6b, 0x05, 0x57, 0x21, 0xbe, 0x0d, 0xed, 0xc0, 0xa1, 0x69, 0x42,
	0x59, 0x7d, 0x04, 0x54, 0x92, 0x99, 0xbf, 0xad, 0x42, 0x67, 0x1f, 0x13, 0x37, 0xf6, 0x4f, 0x27,
	0xc7, 0xe8, 0x08, 0x96, 0x3d, 0x4c, 0x5c, 0x3b, 0xf5, 0xea, 0x23, 0xb2, 0x9f, 0xbc, 0x2e, 0x2a,
	0x79, 0x86, 0x9e, 0xaf, 0xf7, 0x27, 0xcf, 0x41, 0x62, 0x75, 0xbc, 0x2c, 0x00, 0x3d, 0x82, 0x36,
	0x17, 0xa8, 0x3c, 0xa2, 0xea, 0xc9, 0xad, 0x32, 0x69, 0x1f, 0x2b, 0x42, 0xab, 0xe5, 0xa5, 0x97,
	0x68, 0x17, 0x16, 0xb9, 0x24, 0x35, 0xd8, 0x11, 0x5d, 0x69, 0xa3, 0x4c, 0x8e, 0x1a, 0xf6, 0xe8,
	0x5e, 0xb2, 0x48, 0xc9, 0xf0, 0x71, 0x48, 0x89, 0xec, 0x51, 0x33, 0x64, 0x70, 0x32, 0x25, 0x83,
	0x2f, 0x8c, 0x65, 0xe1, 0xb5, 0x94, 0x91, 0x46, 0x87, 0xdd, 0xd6, 0x52, 0xba, 0x1a, 0x1f, 0x81,
	0x9e, 0xd2, 0xe1, 0x85, 0x06, 0x19, 0x46, 0x4b, 0xc9, 0xe2, 0xdb, 0x9b, 0xff, 0xa8, 0xc1, 0x52,
	0xa2, 0xab, 0xcc, 0x9a, 0xe3, 0xf2, 0xb0, 0x7d, 0x2d, 0x6b, 0x9c, 0xac, 0xd9, 0x97, 0xc6, 0xed,
	0xb0, 0x24, 0x6e, 0x66, 0xa9, 0xb8, 0xd2, 0xc0, 0xed, 0x15, 0x06, 0x6e, 0xb3, 0x54, 0x50, 0x61,
	0xe4, 0xf8, 0xd3, 0xd1, 0xe7, 0x23, 0x17, 0x3e, 0x69, 0x9d, 0x3c, 0x1d, 0x19, 0x8c, 0x8f, 0x5a,
	0x8d, 0xff, 0x68, 0x53, 0x91, 0x41, 0x16, 0x2c, 0xe6, 0x7c, 0xc2, 0x2a, 0xda, 0x37, 0xae, 0xe2,
	0x93, 0x6e, 0xf2, 0xdb, 0xd2, 0xbd, 0x54, 0xb4, 0x7f, 0xa1, 0x01, 0xec, 0x67, 0x66, 0xc4, 0xb3,
	0x67, 0x24, 0xf7, 0xa1, 0x93, 0x1d, 0xdf, 0xa8, 0xc7, 0x5b, 0xc1, 0xfc, 0xa6, 0x9d, 0x99, 0xdf,
	0x90, 0x29, 0xb3, 0xab, 0xd3, 0x66, 0xff, 0x45, 0xcb, 0x65, 0x1f, 0x3a, 0xe4, 0xb7, 0x65, 0x19,
	0x36, 0x61, 0xf1, 0xdd, 0xcb, 0xc3, 0xd6, 0x55, 0xbf, 0xac, 0x84, 0xdb, 0x88, 0xf9, 0x15, 0x4d,
	0x64, 0xea, 0x25, 0x2f, 0x53, 0x19, 0xde, 0xcc, 0xcb, 0x54, 0x85, 0x72, 0x82, 0xbc, 0x8a, 0x41,
	0x3f, 0xd5, 0xb2, 0xa7, 0xe7, 0x8a, 0xc3, 0xdc, 0xae, 0xec, 0x7d, 0x8a, 0xb6, 0x32, 0x4d, 0xab,
	0xa7, 0x26, 0x91, 0x57, 0xd0, 0xc4, 0xfc, 0xbb, 0x06, 0xab, 0x7b, 0x31, 0x76, 0x28, 0x56, 0x12,
	0xae, 0xfa, 0xe1, 0x20, 0xed, 0xab, 0xca, 0xf4, 0x28, 0xf6, 0xe5, 0x8e, 0x82, 0xd8, 0x65, 0x97,
	0x46, 0xd4, 0x09, 0xec, 0xcc, 0x78, 0x4c, 0x34, 0xc5, 0x0e, 0xc7, 0xec, 0x27, 0x33, 0x32, 0x35,
	0x59, 0xab, 0x25, 0x93, 0x35, 0xf3, 0x04, 0x6e, 0xe4, 0xec, 0x94, 0x85, 0x65, 0x15, 0x16, 0x70,
	0x1c, 0x47, 0xca, 0x44, 0xb1, 0x48, 0x47, 0xa4, 0x52, 0x1e, 0x11, 0xb3, 0x07, 0xab, 0xa2, 0xc1,
	0xbe, 0x44, 0xef, 0x99, 0x6f, 0xc3, 0x8d, 0x9c, 0xd0, 0x59, 0xaa, 0x9a, 0x3f, 0xd7, 0x00, 0x59,
	0x78, 0x18, 0x38, 0x2e, 0xe6, 0x63, 0xdf, 0x97, 0x11, 0xc0, 0x54, 0x8f, 0xae, 0x66, 0x7a, 0x34,
	0xbf, 0x5b, 0x3d, 0xcb, 0xcd, 0x35, 0x21, 0xc4, 0xcf, 0xe4, 0x54, 0xd3, 0xbc, 0x0b, 0x2b, 0x19,
	0x65, 0x66, 0xaa, 0xfe, 0x27, 0x0d, 0x90, 0x88, 0x0a, 0xbf, 0x3d, 0xbe, 0xe0, 0x4d, 0xf7, 0x2b,
	0xc9, 0x3a, 0xb1, 0x59, 0x51, 0xd6, 0x71, 0x4c, 0x92, 0x75, 0xcc, 0xf2, 0x8c, 0x2d, 0x33, 0x2d,
	0x7f, 0x47, 0xc5, 0x78, 0x52, 0x92, 0x2e, 0xb7, 0xdd, 0xec, 0xc2, 0x5a, 0x9e, 0x69, 0xe6, 0x26,
	0xbf, 0xd1, 0xe0, 0xa6, 0x25, 0x8d, 0xe2, 0xe1, 0x38, 0x8e, 0xf1, 0xd0, 0x89, 0xaf, 0xf4, 0xa2,
	0xb8, 0x09, 0x4d, 0x82, 0xe3, 0xa7, 0x38, 0x4e, 0x1c, 0xdd, 0x10, 0x80, 0xaf, 0xc2, 0xd3, 0xe6,
	0x37, 0xe1, 0xff, 0x8a, 0x35, 0x9d, 0x69, 0xe0, 0x0e, 0x18, 0x19, 0xae, 0xbd, 0x68, 0x30, 0xf0,
	0xe9, 0x55, 0x5c, 0xf9, 0x4e, 0xce, 0x33, 0x8a, 0x73, 0xe6, 0x76, 0xdf, 0xce, 0x33, 0x05, 0xd8,
	0x09, 0x47, 0xc3, 0xab, 0xec, 0x97, 0xb7, 0x6f, 0xc2, 0x3a, 0x73, 0xc3, 0x2f, 0x35, 0xb8, 0xd9,
	0x3b, 0x8f, 0xfd, 0xf0, 0x42, 0x96, 0x82, 0x6b, 0x04, 0xb0, 0xe4, 0x1d, 0x56, 0x29, 0x7b, 0x87,
	0x15, 0x07, 0xac, 0x3a, 0x23, 0x60, 0xc5, 0x9a, 0xcd, 0x34, 0xe8, 0x1c, 0x8c, 0x0c, 0xd7, 0x95,
	0x03, 0x76, 0x5d, 0x73, 0x58, 0x80, 0x0b, 0x77, 0xba, 0x2c, 0xc0, 0x59, 0xa6, 0x6b, 0x05, 0xb8,
	0x98, 0x75, 0xe6, 0x86, 0x11, 0xb4, 0xe4, 0xd7, 0xd3, 0xff, 0x4d, 0xdb, 0x35, 0xdf, 0x80, 0xb6,
	0xda, 0x70, 0x96, 0x62, 0xdb, 0x7f, 0xad, 0x82, 0xfe, 0x99, 0x43, 0x68, 0xf4, 0xd8, 0xe1, 0x57,
	0x89, 0xf7, 0x98, 0xa2, 0x7d, 0x9f, 0xcb, 0x61, 0xf7, 0x37, 0x84, 0x26, 0x37, 0xbb, 0xc9, 0xe7,
	0x71, 0x63, 0x69, 0x02, 0x53, 0x9f, 0xe4, 0xe7, 0xb6, 0xb4, 0x7b, 0x1a, 0xfa, 0x0e, 0xdb, 0x54,
	0x30, 0x8b, 0x3b, 0x3e, 0x5a, 0x29, 0xf8, 0xba, 0x6e, 0x2c, 0x4f, 0x7d, 0x5a, 0x96, 0xfc, 0xef,
	0x42, 0x43, 0x5d, 0xec, 0x04, 0x67, 0xee, 0x25, 0x63, 0xac, 0x16, 0xdd, 0xfd, 0xcc, 0x39, 0xf4,
	0x10, 0x5a, 0x99, 0xa6, 0x8f, 0xc4, 0xd7, 0xeb, 0x82, 0xfb, 0x8e, 0xf1, 0x6a, 0x01, 0x26, 0x2d,
	0x27, 0xd3, 0x91, 0x85, 0x9c, 0xa2, 0xce, 0x2f, 0xe4, 0x14, 0xb6, 0x6f, 0x73, 0x0e, 0xed, 0xa8,
	0x70, 0x2b, 0x39, 0xcb, 0xf2, 0x2b, 0x45, 0x92, 0x01, 0x06, 0x4a, 0x83, 0x26, 0x9c, 0x1f, 0x80,
	0x9e, 0x6a, 0xab, 0x68, 0x4d, 0x10, 0xe5, 0x9b, 0xbe, 0xf1, 0xca, 0x14, 0x5c, 0x49, 0xd8, 0xfe,
	0x65, 0x1d, 0x80, 0x47, 0x54, 0xc4, 0xef, 0x11, 0xb4, 0x32, 0xb3, 0x2e, 0x61, 0x52, 0xd1, 0x88,
	0x50, 0x98, 0x54, 0x38, 0x18, 0x33, 0xe7, 0xee, 0x69, 0xe8, 0x7d, 0x80, 0x13, 0xc7, 0x0f, 0xc4,
	0x2b, 0x1f, 0xdd, 0x10, 0x33, 0xd9, 0xdc, 0xf0, 0xca, 0x58, 0xcb, 0x83, 0x53, 0x02, 0x3e, 0x00,
	0x3d, 0x35, 0x27, 0x10, 0xb6, 0x4d, 0x0f, 0x21, 0x84, 0x6d, 0x05, 0x03, 0x05, 0xe1, 0x9d, 0x54,
	0xeb, 0x95, 0x12, 0xa6, 0xee, 0x15, 0x52, 0xc2, 0x74, 0x8f, 0x36, 0xe7, 0xd8, 0x63, 0x30, 0xdb,
	0x5a, 0x51, 0x2a, 0x90, 0xb9, 0x1e, 0x6d, 0x18, 0x45, 0xa8, 0x89, 0xa8, 0xef, 0xc1, 0x6a, 0x51,
	0x2b, 0x43, 0x1b, 0x2a, 0x36, 0x25, 0xed, 0xd8, 0xd8, 0x2c, 0x27, 0x98, 0x08, 0xff, 0xae, 0xb8,
	0x5e, 0xe5, 0xfa, 0x16, 0x7a, 0x6d, 0x8a, 0x35, 0x53, 0x59, 0x8d, 0x8d, 0x52, 0x7c, 0xa9, 0xda,
	0xb2, 0x80, 0x15, 0xa8, 0x9d, 0xad, 0x8a, 0x05, 0x6a, 0xe7, 0x6a, 0x9f, 0x10, 0x5e, 0xd4, 0x2d,
	0x84, 0xf0, 0x19, 0x1d, 0x4e, 0x08, 0x9f, 0xd5, 0x68, 0x84, 0x4f, 0x0a, 0x4a, 0xbd, 0xf0, 0x49,
	0x79, 0xb7, 0x31, 0x36, 0x4a, 0xf1, 0xa5, 0x6a, 0x67, 0x7c, 0x32, 0xa3, 0x53, 0x14, 0xa8, 0x3d,
	0xe5, 0x93, 0xd3, 0x1a, 0xff, 0xdf, 0xd6, 0x3b, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x4f,
	0xb7, 0x65, 0xc6, 0x25, 0x00, 0x00,
}
