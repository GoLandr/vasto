syntax = "proto3";

package pb;

service VastoMaster {
    rpc RegisterStore (stream StoreHeartbeat) returns (stream StoreMessage) {
        // Stores send the heartbeat to Master
        // Master remembers the stores
        // and broadcast to all other stores and clients
    }

    rpc RegisterClient (stream ClientHeartbeat) returns (stream ClientMessage) {
        // Stores send the heartbeat to Master
        // Master remembers the stores
        // and broadcast to all other stores and clients
    }

    rpc ListStores (ListRequest) returns (ListResponse) {
    }

    rpc ResizeCluster (ResizeRequest) returns (stream ResizeProgress) {
    }

}

service VastoStore {
    rpc BootstrapCopy (stream UpdateEntry) returns (Empty) {
        /*
        client side
        1. if found local is not caught up with other nodes
            discard all local data and binlog offsets
        2. starts to copy
        3. stop when getting the binlog offset
        4. switch to pull changes mode
        5. tell master that this local node is ready

        server side
        1. get current binlog offset
        2. starts to stream data to client
        3. send the binlog offset from step 1
        */
    }
    rpc TailBinlog (PullUpdateRequest) returns (stream PullUpdateResponse) {
        // client pull data from server
    }
    rpc CopyDone (CopyDoneMessge) returns (Empty) {
    }
}

//////////////////////////////////////////////////
// 1. master received request to balance the data

//////////////////////////////////////////////////
// 1. master received request to balance the data
message BalanceRequest {
    string data_center = 1;
    string store_group = 2;
    uint32 store_count = 3; // 0 means to use all existing nodes. can not be more than existing stores.
}

message StoreMessage {
}

message ClientMessage {

    Cluster cluster = 1;

    message StoreResourceUpdate {
        repeated StoreResource stores = 1;
        bool is_delete = 2;
    }
    StoreResourceUpdate updates = 2;

    message Resize {
        uint32 current_cluster_size = 1;
        uint32 next_cluster_size = 2;
    }
    Resize resize = 3;

}

message Topology {
    map<string, Cluster> data_center_clusters = 1;
}

message Cluster {
    string data_center = 1;
    repeated StoreResource stores = 2;
    uint32 expected_cluster_size = 3;
    uint32 current_cluster_size = 4;
    uint32 next_cluster_size = 5;
}

message StoreResource {
    int32 id = 1;
    string network = 2;
    string address = 3;
    string admin_address = 4;
}

message Location {
    string data_center = 1;
    string network = 2;
    string address = 3;
}

//////////////////////////////////////////////////
message StoreHeartbeat {
    string data_center = 1;
    StoreResource store = 2;
}

message ClientHeartbeat {
    Location location = 1;
}

message Empty {
}

//////////////////////////////////////////////////
//// data queries
//////////////////////////////////////////////////
message Requests {
    repeated Request requests = 1;
}

message Responses {
    repeated Response responses = 1;
}

message Request {
    PutRequest put = 1;
    GetRequest get = 2;
    GetByPrefixRequest get_by_prefix = 3;
    DeleteRequest delete = 4;
}

message PutRequest {
    uint32 replica = 1;
    uint64 partition_hash = 2;
    KeyValue key_value = 3;
    uint32 ttl_second = 4;
}

message PutResponse {
    bool ok = 1;
    string status = 2;
}

message DeleteRequest {
    uint32 replica = 1;
    uint64 partition_hash = 2;
    bytes key = 3;
}

message DeleteResponse {
    bool ok = 1;
    string status = 2;
}

message GetRequest {
    uint32 replica = 1;
    bytes key = 2;
}

message GetResponse {
    bool ok = 1;
    string status = 2;
    KeyValue key_value = 3;
}

message GetByPrefixRequest {
    uint32 replica = 1;
    bytes prefix = 2;
    uint32 limit = 3;
    bytes last_seen_key = 4;
}

message GetByPrefixResponse {
    bool ok = 1;
    string status = 2;
    repeated KeyValue key_values = 3;
}

message Response {
    PutResponse put = 1;
    GetResponse get = 2;
    GetByPrefixResponse get_by_prefix = 3;
    DeleteResponse delete = 4;
}

message KeyValue {
    bytes key = 1;
    bytes value = 2;
}

//////////////////////////////////////////////////
//// data copying
//////////////////////////////////////////////////
message CopyDoneMessge {
    int32 shard = 1;
    int64 copy_start_time_ns = 2;
}

message PullUpdateRequest {
    uint32 segment = 1;
    uint64 offset = 2;
    uint32 limit = 3;
}

message PullUpdateResponse {
    uint32 next_segment = 1;
    uint64 next_offset = 2;
    repeated UpdateEntry entries = 3;
}

message UpdateEntry {
    uint64 partition_hash = 3;
    uint64 updated_at_ns = 4;
    uint32 ttl_second = 5;
    uint32 crc = 6;
    bool isDelete = 7;
    bytes key = 8;
    bytes value = 9;
}

//////////////////////////////////////////////////
//// admin
//////////////////////////////////////////////////
message ListRequest {
    string data_center = 1;
}
message ListResponse {
    Cluster cluster = 1;
    uint32 client_count = 2;
}
message ResizeRequest {
    string data_center = 1;
    uint32 cluster_size = 2;
}
message ResizeProgress {
    string error = 1;
    string progress = 2;
    bool hasNotifiedClientsToStart = 3;
    bool hasNotifiedStoresToStart = 4;
    bool areStoresSplit = 5;
    bool areStoresReplicated = 6;
    bool areStoresCaughtUp = 7;
    bool hasNotifiedClientsToStop = 8;
    bool hasNotifiedStoresToStop = 9;
}
