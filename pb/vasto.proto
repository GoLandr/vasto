syntax = "proto3";

package pb;

service VastoMaster {
    rpc RegisterStore (stream StoreHeartbeat) returns (stream StoreMessage) {
        // Stores send the heartbeat to Master
        // Master remembers the stores
        // and broadcast to all other stores and clients
    }

    rpc RegisterClient (stream ClientHeartbeat) returns (stream ClientMessage) {
        // Stores send the heartbeat to Master
        // Master remembers the stores
        // and broadcast to all other stores and clients
    }

    rpc ListStores (ListRequest) returns (ListResponse) {
    }

    rpc ResizeCluster (ResizeRequest) returns (stream ResizeProgress) {
    }

}

service VastoStore {
    rpc Put (PutRequest) returns (PutResponse) {
    }
}

//////////////////////////////////////////////////
// 1. master received request to balance the data

//////////////////////////////////////////////////
// 1. master received request to balance the data
message BalanceRequest {
    string data_center = 1;
    string store_group = 2;
    uint32 store_count = 3; // 0 means to use all existing nodes. can not be more than existing stores.
}

message StoreMessage {
}

message ClientMessage {
    message StoreResourceUpdate {
        repeated StoreResource stores = 1;
        bool is_delete = 2;
    }
    StoreResourceUpdate updates = 1;

    message Resize {
        uint32 current_cluster_size = 1;
        uint32 new_cluster_size = 2;
    }
    Resize resize = 2;

}

message Topology {
    repeated Ring rings = 1;
}

message Ring {
    string data_center = 1;
    repeated StoreResource stores = 2;
}

message StoreResource {
    int32 id = 1;
    Location location = 2;
}

message Location {
    string data_center = 1;
    string address = 2;
}

//////////////////////////////////////////////////
message StoreHeartbeat {
    string data_center = 1;
    StoreResource store = 2;
}

message ClientHeartbeat {
    Location location = 1;
}

message Empty {
}

//////////////////////////////////////////////////
//// data queries
//////////////////////////////////////////////////
message Requests {
    repeated Request requests = 1;
}

message Responses {
    repeated Response responses = 1;
}

message Request {
    PutRequest put = 1;
    GetRequest get = 2;
    RangeGetRequest range_get = 3;
    DeleteRequest delete = 4;
}

message PutRequest {
    KeyValue key_value = 1;
    int64 timestamp_ns = 2;
    uint32 ttl_ms = 3;
}

message PutResponse {
    bool ok = 1;
    string status = 2;
}

message DeleteRequest {
    bytes key = 1;
}

message DeleteResponse {
    bool ok = 1;
    string status = 2;
}

message GetRequest {
    bytes key = 1;
}

message GetResponse {
    bool ok = 1;
    KeyValue key_value = 2;
}

message RangeGetRequest {
    bytes prefix = 1;
    bytes start_key = 2;
    uint32 limit = 3;
}

message RangeGetResponse {
    repeated KeyValue key_values = 1;
}

message Response {
    PutResponse put = 1;
    GetResponse get = 2;
    RangeGetResponse range_get = 3;
    DeleteResponse delete = 4;
}

message KeyValue {
    bytes key = 1;
    bytes value = 2;
}

//////////////////////////////////////////////////
//// admin
//////////////////////////////////////////////////
message ListRequest {
    string data_center = 1;
}
message ListResponse {
    string data_center = 1;
    uint32 current_cluster_size = 2;
    uint32 next_cluster_size = 3;
    repeated StoreResource stores = 4;
    uint32 client_count = 5;
}
message ResizeRequest {
    string data_center = 1;
    uint32 cluster_size = 2;
}
message ResizeProgress {
    string error = 1;
    string progress = 2;
    bool hasNotifiedClientsToStart = 3;
    bool hasNotifiedStoresToStart = 4;
    bool areStoresSplit = 5;
    bool areStoresReplicated = 6;
    bool areStoresCaughtUp = 7;
    bool hasNotifiedClientsToStop = 8;
    bool hasNotifiedStoresToStop = 9;
}
